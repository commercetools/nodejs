#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const execSync = require('child_process').execSync
const chalk = require('chalk')

const packagesDir = path.resolve(__dirname, '../packages')
// Define list of task names that packages can override in their `package.json`
// Example:
//   "scripts": {
//     "task:build": "echo \"custom build task\""
//   }
const taskNames = [
  'task:build',
  'task:clean',
]

// Read task name to run
const args = process.argv.slice(2)
if (args.length === 0) {
  console.error(chalk.red('Missing task name'))
  process.exit(1)
}
const name = args[0]

const taskName = `task:${name}`

if (taskNames.indexOf(taskName) < 0) {
  console.error(
    chalk.red(
      `Unsupported task name ${taskNameToRun}. ` +
      `Supported names are ${taskNames.map(
        name => name.replace('task:', '')
      ).join(', ')}`
    )
  )
  process.exit(1)
}

// Load main `package.json`
const mainPackageDefinition = parsePackageJson(
  path.resolve(__dirname, '../package.json')
)
// Pick the defined task name in the main `package.json`
const mainTaskCommand = mainPackageDefinition.scripts[taskName]

let thereWasAnError = false

// Run through all packages and check if the local `package.json`
// has a custom version of the script.
// If so run the local one, otherwise the main one.
fs.readdirSync(packagesDir)
  .map(file => path.resolve(packagesDir, file))
  .filter(f => fs.lstatSync(path.resolve(f)).isDirectory())
  .forEach(packagePath => {
    const localPackageDefinition = parsePackageJson(
      path.resolve(packagePath, 'package.json')
    )
    const localTaskCommand = (
      localPackageDefinition.scripts &&
      localPackageDefinition.scripts[taskName]
    )

    const taskCommand = localTaskCommand || mainTaskCommand

    const dirParts = packagePath.split('packages/')
    const packageName = dirParts[dirParts.length - 1]
    const commandType = chalk.underline(localTaskCommand ? 'custom' : 'main')
    process.stdout.write(
      chalk.dim(`Running ${commandType} command (`) +
      packageName +
      chalk.dim(')\n')
    )

    try {
      const result = execSync(
        taskCommand,
        {
          cwd: packagePath,
          encoding: 'utf8',
        }
      )
      process.stdout.write(`${chalk.green(`[  OK  ]`)} => ${taskCommand}\n`)
      process.stdout.write(chalk.grey(result))
      process.stdout.write('\n')
    } catch (error) {
      process.stdout.write(`${chalk.red(`[  ERROR  ]`)} => ${taskCommand}\n`)
      console.error(chalk.red(error))
      thereWasAnError = true
    }
  })

if (thereWasAnError)
  process.exit(1)

function parsePackageJson (filePath) {
  return JSON.parse(
    fs.readFileSync(filePath, 'utf8')
  )
}
