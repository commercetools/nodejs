version: 2.1

aliases:
  - &working_directory ~/nodejs

executors:
  node_18:
    docker:
      - image: cimg/node:18.18.0
    working_directory: *working_directory
  node_20:
    docker:
      - image: cimg/node:20.9.0
    working_directory: *working_directory

  node_22:
    docker:
      - image: cimg/node:22.14.0
    working_directory: *working_directory

commands:
  pnpm_install:
    description: Installs dependencies using PNPM
    parameters:
      pnpm_store_dir:
        type: string
        default: /home/circleci/.local/share/pnpm/store
      pnpm_install_directory:
        type: string
        default: /home/circleci/bin
      command:
        type: string
        default: pnpm install --frozen-lockfile
    steps:
      - restore_cache:
          name: Restoring pnpm cache
          keys:
            # Delete and re-create a increased `CACHE_VERSION_PNPM` variable in CircleCI's project configuration.
            # https://app.circleci.com/settings/project/github/commercetools/nodejs/environment-variables
            - pnpm-cache-{{ .Environment.CACHE_VERSION_PNPM }}-{{ checksum "pnpm-lock.yaml" }}
      - run:
          name: Ensuring pnpm installation directory exists
          command: mkdir -p << parameters.pnpm_install_directory >>
      - run:
          name: Exporting << parameters.pnpm_install_directory >> to PATH
          command: echo 'export PATH=$PATH:<< parameters.pnpm_install_directory >>' >> $BASH_ENV
      - run:
          name: Installing pnpm via corepack
          command: |
            corepack enable --install-directory << parameters.pnpm_install_directory >>
            corepack prepare --activate
      - run:
          name: Setting pnpm store
          command: pnpm config set store-dir << parameters.pnpm_store_dir >>
      - save_cache:
          name: Saving pnpm cache
          key: pnpm-cache-{{ .Environment.CACHE_VERSION_PNPM }}-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - node_modules
      - run:
          name: Installing project dependencies
          command: << parameters.command >>

jobs:
  install_test_node_18:
    executor: node_18
    steps:
      - checkout
      - pnpm_install
      - run:
          name: Building libraries
          command: pnpm build
      - run:
          name: Running linters
          # Limiting the workers of Jest to 10
          # as the build otherwise dies due to resource restrictions.
          command: pnpm lint --maxWorkers=10
      - run:
          name: Running tests
          # Limiting the workers of Jest to 10
          # as the build otherwise dies due to resource restrictions.
          command: pnpm test:ci
      - run:
          name: Running test (with coverage report)
          command: pnpm test:ci

  install_test_node_20:
    executor: node_20
    steps:
      - checkout
      - pnpm_install
      - run:
          name: Building libraries
          command: pnpm build
      - run:
          name: Running linters
          # Limiting the workers of Jest to 10
          # as the build otherwise dies due to resource restrictions.
          command: pnpm lint --maxWorkers=10
      - run:
          name: Running tests (with coverage report)
          # Limiting the workers of Jest to 10
          # as the build otherwise dies due to resource restrictions.
          command: pnpm test:coverage:ci
      - run:
          name: Running integration tests
          command: pnpm test:integration

  install_test_node_22:
    executor: node_22
    steps:
      - checkout
      - pnpm_install
      - run:
          name: Building libraries
          command: pnpm build
      - run:
          name: Running linters
          # Limiting the workers of Jest to 10
          # as the build otherwise dies due to resource restrictions.
          command: pnpm lint --maxWorkers=10
      - run:
          name: Running tests (with coverage report)
          # Limiting the workers of Jest to 10
          # as the build otherwise dies due to resource restrictions.
          command: pnpm test:coverage:ci
      - run:
          name: Running integration tests
          command: pnpm test:integration

workflows:
  build_and_test:
    jobs:
      - install_test_node_18:
          context: org-global
      - install_test_node_20:
          context: org-global
          requires:
            - install_test_node_18
      - install_test_node_22:
          context: org-global
          requires:
            - install_test_node_20
