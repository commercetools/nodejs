{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Node.js commercetools ecosystem. </p> <p> </p> <p>The commercetools nodejs repo is managed as a monorepo and contains different npm packages.</p>"},{"location":"cli/","title":"CLI","text":"<p>This section contains all information about the command line tools built by the commercetools nodeJS team.</p> <p>Our CLI tools perform various functions from importing and exporting to syncing data between various projects in the commercetools platform.</p>"},{"location":"cli/#modules","title":"modules","text":"<ul> <li>Category Exporter</li> <li>CSV Discount Code Parser</li> <li>CSV Price Parser</li> <li>CSV Order Parser</li> <li>CSV State Parser</li> <li>Custom Objects Exporter</li> <li>Custom Objects Importer</li> <li>Customer Groups Exporter</li> <li>Personal Data Erasure</li> <li>Discount Code Generator</li> <li>Discount Code Exporter</li> <li>Discount Code Importer</li> <li>Inventories Exporter</li> <li>Price Exporter</li> <li>Product Exporter</li> <li>Product JSON to CSV</li> <li>Resource Deleter</li> <li>State importer</li> </ul>"},{"location":"cli/category-exporter/","title":"Category Exporter","text":"<p>A package which exports commercetools categories in <code>JSON</code> format from the commercetools platform.</p>"},{"location":"cli/category-exporter/#configuration","title":"Configuration","text":"<p>The constructor accepts two arguments:</p> <ul> <li>A required object containing the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>accessToken</code> (String): [Access token] to be used to authenticate requests to API. Requires scope of [<code>view_products</code>, <code>manage_products</code>]. More info on how to get the access token here</li> <li><code>predicate</code> (String): Query string specifying (where) predicate. More info on predicates here (Optional)</li> <li>An optional logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>)</li> </ul>"},{"location":"cli/category-exporter/#usage","title":"Usage","text":"<p><code>npm install @commercetools/category-exporter --global</code></p>"},{"location":"cli/category-exporter/#cli","title":"CLI","text":"<pre><code>Usage: category-exporter [options]\nExport categories from the commercetools platform\n\nOptions:\n  --help                     Show help text.                           [boolean]\n  --version                  Show version number                       [boolean]\n  --output, -o               Path to output file.            [default: \"stdout\"]\n  --apiUrl                   The host URL of the HTTP API service.\n                                              [default: \"https://api.europe-west1.gcp.commercetools.com\"]\n  --authUrl                  The host URL of the OAuth API service.\n                                             [default: \"https://auth.europe-west1.gcp.commercetools.com\"]\n  --accessToken              CTP client access token\n                             Required scopes: ['view_products', 'manage_products'][string]\n  --projectKey, -p           API project key.                         [required]\n  --where, -w                specify where predicate\n  --logLevel                 Logging level: error, warn, info or debug.\n                                                               [default: \"info\"]\n  --prettyLogs               Pretty print logs to the terminal         [boolean]\n  --logFile                  Path to file where to save logs.\n                                              [default: \"category-exporter.log\"]\n</code></pre>"},{"location":"cli/category-exporter/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--output</code> flag specifies where to output/save the exported categories. Several notes on this flag:</li> <li>If the file specified already exists, it will be overwritten.</li> <li>The default location for status report logging is the standard output.</li> <li>If no output path is specified, the exported categories will be logged to the standard output as a result, status reports will be logged to a <code>category-exporter.log</code> file in the current directory.</li> <li>The <code>where</code> flag specifies an optional (where) query predicate to be included in the request. This predicate should be wrapped in single quotes ('single quoted predicate'). More info on predicates here</li> </ul>"},{"location":"cli/category-exporter/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly:</p> <pre><code>import CategoryExporter from '@commercetools/category-exporter'\nimport fs from 'fs'\n\nconst options = {\n    apiConfig: {\n      apiUrl: 'https://api.europe-west1.gcp.commercetools.com'\n      host: 'https://auth.europe-west1.gcp.commercetools.com'\n      project_key: 'PROJECT_KEY',\n      credentials: {\n        clientId: '*********',\n        clientSecret: '*********'\n      }\n    },\n    accessToken: '123456yuhgfdwegh675412wefb4rgb',\n    predicate: 'key=\"my-desired-key\"'\n  }\n}\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  debug: console.debug,\n}\n\nconst categoryExporter = new CategoryExporter(options, logger)\n\n// Register error listener\noutputStream.on('error', errorHandler)\n\noutputStream.on('finish', () =&gt; console.log('done with export'))\n\ncategoryExporter.run(outputStream)\n</code></pre>"},{"location":"cli/csv-parser-discount-code/","title":"CSV Parser Discount Code","text":"<p>Convert commercetools discount codes CSV data to JSON. See example below for CSV format, sample response and usage.</p>"},{"location":"cli/csv-parser-discount-code/#usage","title":"Usage","text":"<p><code>npm install @commercetools/csv-parser-discount-code --global</code></p>"},{"location":"cli/csv-parser-discount-code/#cli","title":"CLI","text":"<pre><code>Usage: csvparserdiscountcode [options]\nConvert commercetools discount codes CSV data to JSON.\n\nOptions:\n  --help, -h                 Show help text.                                       [boolean]\n  --version, -v              Show version number.                                  [boolean]\n  --input, -i                Path to CSV file.                            [default: \"stdin\"]\n  --output, -o               Path to output JSON file.                   [default: \"stdout\"]\n  --delimiter, -d            Used CSV delimiter for input and/or output file. [default: \",\"]\n  --multiValueDelimiter, -m  Used CSV delimiter in multiValue\n                               fields for input/output file.                  [default: \";\"]\n  --continueOnProblems, -c   Flag if parsing should continue if module\n                               encounters an error.               [boolean] [default: false]\n  --logLevel, -l             Logging level: error, warn, info or verbose.  [default: \"info\"]\n</code></pre>"},{"location":"cli/csv-parser-discount-code/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--input</code> flag specifies the path to the discount codes CSV file. If this flag is omitted, the module will attempt to read the data from the <code>standard input</code>.</li> <li>The <code>--output</code> flag specifies where to output/save the parsed discount codes as JSON file. Several notes on this flag:</li> <li>If the file specified already exists, it will be overwritten.</li> <li>The default location for status report logging is the standard output.</li> <li>If no output path is specified, the generated codes will be logged to the standard output as a result, status reports will be logged to a <code>csv-parser-discount-code.log</code> file in the current directory.</li> <li>The <code>--delimiter</code> flag specifies the delimiter used in the input file. Defaults to <code>','</code> if omitted.</li> <li>The <code>--multiValueDelimiter</code> flag specifies the delimiter for multiValue cells in CSV. Note that only the <code>cartDiscounts</code> field if present should contain multiple values. Defaults to <code>';'</code> if omitted.</li> <li>The <code>--continueOnProblems</code> flag specifies if the module should continue parsing discount codes if it encounters an error. Defaults to <code>false</code> if omitted.</li> <li>If the module should continue on error, all errors are logged to the logging location (see above).</li> <li>If the module should not continue on error, the failing error is written to the <code>stderr</code>, regardless of the output and logging locations</li> </ul>"},{"location":"cli/csv-parser-discount-code/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly:</p> <pre><code>const fs = require('fs')\nconst CsvParserDiscountCode = require('@commercetools/csv-parser-discount-code')\n\nconst csvParser = new CsvParserDiscountCode(logger, configuration)\n\nconst inputStream = fs.createReadStream('path-to-input-file.csv')\nconst outputStream = fs.createWriteStream('path-to-destination.json')\n\ncsvParser.parse(inputStream, outputStream)\n\n// Listen for events\noutputStream\n  .on('error', (error) =&gt; {\n    // &lt;- Handle errors here\n  })\n  .on('finish', () =&gt; {\n    // &lt;- Do something here\n  })\n</code></pre> <p>The constructor takes in 2 optional parameters</p> <ul> <li>A logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>)</li> <li>A configuration object containing any/all of the following values:</li> <li><code>delimiter</code> (String): Used delimeter in the CSV (Default: <code>','</code>)</li> <li><code>multiValueDelimiter</code> (String): Used delimeter in multiValue fields in the CSV (Default: <code>';'</code>)</li> <li><code>continueOnProblems</code> (Boolean): Option if module should continue on errors (Default: <code>false</code>)</li> </ul>"},{"location":"cli/csv-parser-discount-code/#examples","title":"Examples","text":"<p>If we want to parse 3 discount codes from CSV to JSON; with the following as input:</p> <pre><code>name.en,name.de,description.en,description.de,cartDiscounts,cartPredicate,isActive,maxApplications,maxApplicationsPerCustomer,code\nJames,Flo,some description,eine beschreibung,disc1;disc2;disc3,LineItems &gt; \"50\",true,9,3,WICd36fsdc\nEaster,Oster,some description 4,eine beschreibung 4,disc1;disc2;disc3,LineItems &gt; \"50\",true,9,3,WIC109axn\nAscension,Feiertag,some good description 5,eine gute beschreibung 5,disc1;disc2;disc3,LineItems &gt; \"50\",true,9,3,WI10sw34\n</code></pre> <p>Using the CLI, we could run the following command:</p> <pre><code>csvparserdiscountcode -i /path-to-input-file.csv -o /path-to-output.json -c true\n</code></pre> <p>And the following would be written to the JSON file</p> <pre><code>[\n  {\n    \"name\": {\n      \"en\": \"James\",\n      \"de\": \"Flo\"\n    },\n    \"description\": {\n      \"en\": \"some description\",\n      \"de\": \"eine beschreibung\"\n    },\n    \"cartDiscounts\": [\n      {\n        \"typeId\": \"cart-discount\",\n        \"id\": \"disc1\"\n      },\n      {\n        \"typeId\": \"cart-discount\",\n        \"id\": \"disc2\"\n      },\n      {\n        \"typeId\": \"cart-discount\",\n        \"id\": \"disc3\"\n      }\n    ],\n    \"cartPredicate\": \"LineItems &gt; \\\"50\\\"\",\n    \"isActive\": \"true\",\n    \"maxApplications\": \"9\",\n    \"maxApplicationsPerCustomer\": \"3\",\n    \"code\": \"WICd36fsdc\"\n  },\n  {\n    \"name\": {\n      \"en\": \"Easter\",\n      \"de\": \"Oster\"\n    },\n    \"description\": {\n      \"en\": \"some description 4\",\n      \"de\": \"eine beschreibung 4\"\n    },\n    \"cartDiscounts\": [\n      {\n        \"typeId\": \"cart-discount\",\n        \"id\": \"disc1\"\n      },\n      {\n        \"typeId\": \"cart-discount\",\n        \"id\": \"disc2\"\n      },\n      {\n        \"typeId\": \"cart-discount\",\n        \"id\": \"disc3\"\n      }\n    ],\n    \"cartPredicate\": \"LineItems &gt; \\\"50\\\"\",\n    \"isActive\": \"true\",\n    \"maxApplications\": \"9\",\n    \"maxApplicationsPerCustomer\": \"3\",\n    \"code\": \"WIC109axn\"\n  },\n  {\n    \"name\": {\n      \"en\": \"Ascension\",\n      \"de\": \"Feiertag\"\n    },\n    \"description\": {\n      \"en\": \"some good description 5\",\n      \"de\": \"eine gute beschreibung 5\"\n    },\n    \"cartDiscounts\": [\n      {\n        \"typeId\": \"cart-discount\",\n        \"id\": \"disc1\"\n      },\n      {\n        \"typeId\": \"cart-discount\",\n        \"id\": \"disc2\"\n      },\n      {\n        \"typeId\": \"cart-discount\",\n        \"id\": \"disc3\"\n      }\n    ],\n    \"cartPredicate\": \"LineItems &gt; \\\"50\\\"\",\n    \"isActive\": \"true\",\n    \"maxApplications\": \"9\",\n    \"maxApplicationsPerCustomer\": \"3\",\n    \"code\": \"WI10sw34\"\n  }\n]\n</code></pre>"},{"location":"cli/csv-parser-discount-code/#additional-information","title":"Additional information","text":"<ul> <li>No field in the csv file is mandatory</li> <li>the <code>cartDiscounts</code> field should contain a string of cart-discount IDs, delimited by the <code>multiValueDelimiter</code></li> </ul>"},{"location":"cli/csv-parser-orders/","title":"CSV Parser Orders","text":"<p>Convert commercetools order CSV data to JSON. See examples below for supported CSV format and sample responses.</p>"},{"location":"cli/csv-parser-orders/#usage","title":"Usage","text":"<p><code>npm install @commercetools/csv-parser-orders --global</code></p>"},{"location":"cli/csv-parser-orders/#cli","title":"CLI","text":"<pre><code>Usage: csvparserorder [options]\nConvert commercetools order CSV data to JSON.\n\nOptions:\n  --help, -h        Show help text.                              [boolean]\n  --version, -v     Show version number.                         [boolean]\n  --type, -t        Predefined type of csv.                      [required] [choices: \"lineitemstate\", \"returninfo\", \"deliveries\"]\n  --inputFile, -i   Path to input CSV file.                      [default: \"stdin\"]\n  --outputFile, -o  Path to output JSON file.                    [default: \"stdout\"]\n  --batchSize, -b   Number of CSV rows to handle simultaneously. [default: 100]\n  --delimiter, -d   Used CSV delimiter.                          [default: \",\"]\n \u00a0--encoding, -e \u00a0  Encoding used in the CSV.                    [default: \"utf8\"]\n  --strictMode, -s  Parse CSV strictly.                          [default: true]\n  --logLevel, -l    Logging level: error, warn, info or verbose. [default: \"info\"]\n  --logFile         Path to file where to save logs.             [default: \"csvparserorder.log\"]\n</code></pre>"},{"location":"cli/csv-parser-orders/#usage_1","title":"Usage","text":""},{"location":"cli/csv-parser-orders/#line-item-state-parser","title":"Line item state parser:","text":"<p>Command:</p> <pre><code>$ csvparserorder -t lineitemstate -i data/lineitemstate-input.csv\n</code></pre> <p>Output:</p> <pre><code>[\n  {\n    \"orderNumber\": \"234\",\n    \"lineItems\": [\n      {\n        \"id\": \"123\",\n        \"state\": [\n          {\n            \"quantity\": 10,\n            \"fromState\": \"order\",\n            \"toState\": \"shipped\",\n            \"_fromStateQty\": 100\n          }\n        ]\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"cli/csv-parser-orders/#return-info-parser","title":"Return info parser:","text":"<p>Command:</p> <pre><code>$ csvparserorder -t returninfo -i data/return-info-sample-input.csv\n</code></pre> <p>Output:</p> <pre><code>[\n  {\n    \"orderNumber\": \"123\",\n    \"returnInfo\": [\n      {\n        \"returnTrackingId\": \"aefa34fe\",\n        \"_returnId\": \"1\",\n        \"returnDate\": \"2016-11-01T08:01:19+0000\",\n        \"items\": [\n          {\n            \"quantity\": 4,\n            \"lineItemId\": \"12ae\",\n            \"comment\": \"yeah\",\n            \"shipmentState\": \"shipped\"\n          },\n          {\n            \"quantity\": 4,\n            \"lineItemId\": \"12ae\",\n            \"comment\": \"yeah\",\n            \"shipmentState\": \"not-shipped\"\n          }\n        ]\n      },\n      {\n        \"returnTrackingId\": \"aefa34fe\",\n        \"_returnId\": \"2\",\n        \"returnDate\": \"2016-11-01T08:01:19+0000\",\n        \"items\": [\n          {\n            \"quantity\": 4,\n            \"lineItemId\": \"12ae\",\n            \"comment\": \"yeah\",\n            \"shipmentState\": \"not-shipped\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"orderNumber\": \"124\",\n    \"returnInfo\": [\n      {\n        \"returnTrackingId\": \"aefa34fe\",\n        \"_returnId\": \"2\",\n        \"returnDate\": \"2016-11-01T08:01:19+0000\",\n        \"items\": [\n          {\n            \"quantity\": 4,\n            \"lineItemId\": \"12ae\",\n            \"comment\": \"yeah\",\n            \"shipmentState\": \"not-shipped\"\n          }\n        ]\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"cli/csv-parser-orders/#deliveries-parser","title":"Deliveries parser:","text":"<p>Command:</p> <pre><code>$ csvparserorder.js -t deliveries -i data/deliveries/delivery.csv\n</code></pre> <p>Output:</p> <pre><code>[\n  {\n    \"orderNumber\": \"222\",\n    \"shippingInfo\": {\n      \"deliveries\": [\n        {\n          \"id\": \"1\",\n          \"items\": [\n            {\n              \"id\": \"1\",\n              \"quantity\": 100\n            },\n            {\n              \"id\": \"1\",\n              \"quantity\": 100\n            },\n            {\n              \"id\": \"2\",\n              \"quantity\": 200\n            }\n          ]\n        },\n        {\n          \"id\": \"2\",\n          \"items\": [\n            {\n              \"id\": \"3\",\n              \"quantity\": 300\n            }\n          ]\n        },\n        {\n          \"id\": \"3\",\n          \"items\": [\n            {\n              \"id\": \"4\",\n              \"quantity\": 400\n            },\n            {\n              \"id\": \"5\",\n              \"quantity\": 400\n            },\n            {\n              \"id\": \"5\",\n              \"quantity\": 400\n            },\n            {\n              \"id\": \"1\",\n              \"quantity\": 100\n            }\n          ]\n        }\n      ]\n    }\n  },\n  {\n    \"orderNumber\": \"100\",\n    \"shippingInfo\": {\n      \"deliveries\": [\n        {\n          \"id\": \"1\",\n          \"items\": [\n            {\n              \"id\": \"4\",\n              \"quantity\": 400\n            }\n          ]\n        }\n      ]\n    }\n  }\n]\n</code></pre>"},{"location":"cli/csv-parser-orders/#js","title":"JS","text":"<pre><code>const fs = require('fs')\nconst {\n  LineItemStateCsvParser,\n  AddReturnInfoCsvParser,\n  DeliveriesCsvParser,\n} = require('@commercetools/csv-parser-orders')\n\nconst parser = new LineItemStateCsvParser({\n  logger: {\n    error: console.error,\n    warn: console.warn,\n    info: console.log,\n    verbose: console.log,\n  },\n  csvConfig: {\n    delimiter: ',',\n    batchSize: 100,\n    strictMode: true,\n  },\n})\n\n// parser._processData(&lt;CSV OBJECT&gt;) // returns parsed order\n\nparser.parse(\n  fs.createReadStream('./input.csv'),\n  fs.createWriteStream('./output.json')\n)\n</code></pre> <p>Errors on the level <code>error</code> come from events that are fatal and thus stop the stream of data.</p>"},{"location":"cli/csv-parser-orders/#configuration","title":"Configuration","text":"<p>All <code>LineItemStateCsvParser</code>, <code>AddReturnInfoCsvParser</code> and <code>DeliveriesCsvParser</code> classes accept an object with two fields:</p> <ul> <li><code>logger</code> takes object with four functions (optional)</li> <li><code>csvConfig</code> takes configuration for CSV parser (optional)</li> <li><code>batchSize</code>: number of CSV rows to handle simultaneously. (default: <code>100</code>)</li> <li><code>delimiter</code>: the used CSV delimiter (default: <code>,</code>)</li> <li><code>strictMode</code>: require CSV column length to match headers length (default: true)</li> </ul>"},{"location":"cli/csv-parser-orders/#csv-formats","title":"CSV formats","text":""},{"location":"cli/csv-parser-orders/#return-info","title":"Return info","text":"<p>Sample returnInfo sample CSV file</p> <pre><code>orderNumber,lineItemId,quantity,comment,shipmentState,returnDate,returnTrackingId,_returnId\n123,12ae,4,yeah,shipped,2016-11-01T08:01:19+0000,aefa34fe,1\n123,12ae,4,yeah,not-shipped,2016-11-01T08:01:19+0000,aefa34fe,1\n123,12ae,4,yeah,not-shipped,2016-11-01T08:01:19+0000,aefa34fe,2\n124,12ae,4,yeah,not-shipped,2016-11-01T08:01:19+0000,aefa34fe,2\n</code></pre> <p>JSON object returned from the conversion of the CSV file above</p> <pre><code>[\n  {\n    \"orderNumber\": \"123\",\n    \"returnInfo\": [\n      {\n        \"returnTrackingId\": \"aefa34fe\",\n        \"_returnId\": \"1\",\n        \"returnDate\": \"2016-11-01T08:01:19+0000\",\n        \"items\": [\n          {\n            \"quantity\": 4,\n            \"lineItemId\": \"12ae\",\n            \"comment\": \"yeah\",\n            \"shipmentState\": \"shipped\"\n          },\n          {\n            \"quantity\": 4,\n            \"lineItemId\": \"12ae\",\n            \"comment\": \"yeah\",\n            \"shipmentState\": \"not-shipped\"\n          }\n        ]\n      },\n      {\n        \"returnTrackingId\": \"aefa34fe\",\n        \"_returnId\": \"2\",\n        \"returnDate\": \"2016-11-01T08:01:19+0000\",\n        \"items\": [\n          {\n            \"quantity\": 4,\n            \"lineItemId\": \"12ae\",\n            \"comment\": \"yeah\",\n            \"shipmentState\": \"not-shipped\"\n          }\n        ]\n      }\n    ]\n  },\n  {\n    \"orderNumber\": \"124\",\n    \"returnInfo\": [\n      {\n        \"returnTrackingId\": \"aefa34fe\",\n        \"_returnId\": \"2\",\n        \"returnDate\": \"2016-11-01T08:01:19+0000\",\n        \"items\": [\n          {\n            \"quantity\": 4,\n            \"lineItemId\": \"12ae\",\n            \"comment\": \"yeah\",\n            \"shipmentState\": \"not-shipped\"\n          }\n        ]\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"cli/csv-parser-orders/#line-item-state","title":"Line item state","text":"<p>Sample lineItemState sample CSV file</p> <pre><code>orderNumber,lineItemId,quantity,fromState,toState,actualTransitionDate,_fromStateQty\n234,123,10,order,shipped,2016-11-01T08:01:19+0000,100\n</code></pre> <p>JSON object returned from the conversion of the CSV file above</p> <pre><code>[\n  {\n    \"orderNumber\": \"234\",\n    \"lineItems\": [\n      {\n        \"id\": \"123\",\n        \"state\": [\n          {\n            \"quantity\": 10,\n            \"fromState\": \"order\",\n            \"toState\": \"shipped\",\n            \"_fromStateQty\": 100\n          }\n        ]\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"cli/csv-parser-orders/#deliveries","title":"Deliveries","text":"<p>CSV file with deliveries have the following format:</p> <pre><code>orderNumber,delivery.id,_itemGroupId,item.id,item.quantity,parcel.id,parcel.length,parcel.height,parcel.width,parcel.weight,parcel.trackingId,parcel.carrier,parcel.provider,parcel.providerTransaction,parcel.isReturn,parcel.items\n111,1,1,123,1,1,100,200,200,500,123456789,DHL,provider,transaction provider,0,123:1;222:1\n111,1,2,222,3,1,100,200,200,500,123456789,DHL,provider,transaction provider,0,123:1;222:1\n111,1,1,123,1,2,100,200,200,500,2222222,,abcd,dcba,true,222:2\n</code></pre> <p>Where CSV fields <code>orderNumber, delivery.id, _itemGroupId, item.id, item.quantity</code> are mandatory because every delivery has to have at least one delivery item.</p> <p>If the CSV file contains measurement fields (<code>parcel.length, parcel.height, parcel.width, parcel.weight</code>) all of them has to be provided or the parser returns an error <code>All measurement fields are mandatory</code>.</p> <p>Because an API allows us to save multiple delivery items with same <code>id</code> and <code>quantity</code> there is <code>_itemGroupId</code> field which helps us to distinguish different delivery items. This field has to have a unique value for different delivery items (in example above CSV rows 2 and 3 belongs to one delivery which has 2 delivery items - two different _itemGroupIds).</p> <p>Example provided above will be parsed into following JSON:</p> <pre><code>[\n  {\n    \"orderNumber\": \"111\",\n    \"shippingInfo\": {\n      \"deliveries\": [\n        {\n          \"id\": \"1\",\n          \"items\": [\n            {\n              \"id\": \"123\",\n              \"quantity\": 1\n            },\n            {\n              \"id\": \"222\",\n              \"quantity\": 3\n            }\n          ],\n          \"parcels\": [\n            {\n              \"id\": \"1\",\n              \"measurements\": {\n                \"heightInMillimeter\": 200,\n                \"lengthInMillimeter\": 100,\n                \"weightInGram\": 500,\n                \"widthInMillimeter\": 200\n              },\n              \"trackingData\": {\n                \"carrier\": \"DHL\",\n                \"isReturn\": false,\n                \"provider\": \"provider\",\n                \"providerTransaction\": \"transaction provider\",\n                \"trackingId\": \"123456789\"\n              },\n              \"items\": [\n                {\n                  \"id\": \"123\",\n                  \"quantity\": 1\n                },\n                {\n                  \"id\": \"222\",\n                  \"quantity\": 1\n                }\n              ]\n            },\n            {\n              \"id\": \"2\",\n              \"measurements\": {\n                \"heightInMillimeter\": 200,\n                \"lengthInMillimeter\": 100,\n                \"widthInMillimeter\": 200,\n                \"weightInGram\": 500\n              },\n              \"trackingData\": {\n                \"isReturn\": true,\n                \"provider\": \"abcd\",\n                \"providerTransaction\": \"dcba\",\n                \"trackingId\": \"2222222\"\n              },\n              \"items\": [\n                {\n                  \"id\": \"222\",\n                  \"quantity\": 2\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  }\n]\n</code></pre> <p>More delivery examples can be seen here.</p>"},{"location":"cli/csv-parser-price/","title":"CSV Parser Price","text":"<p>Convert commercetools price CSV data to JSON. See example below for CSV format and sample response</p>"},{"location":"cli/csv-parser-price/#usage","title":"Usage","text":"<p><code>npm install @commercetools/csv-parser-price --global</code></p>"},{"location":"cli/csv-parser-price/#cli","title":"CLI","text":"<pre><code>Usage: csvparserprice [options]\nConvert commercetools price CSV data to JSON.\n\nOptions:\n  --help, -h        Show help text.                                    [boolean]\n  --version, -v     Show version number.                               [boolean]\n  --inputFile, -i   Path to input CSV file.                   [default: \"stdin\"]\n  --outputFile, -o  Path to output JSON file.                [default: \"stdout\"]\n  --apiUrl          The host URL of the HTTP API service.\n                                              [default: \"https://api.europe-west1.gcp.commercetools.com\"]\n  --authUrl         The host URL of the OAuth API service.\n                                             [default: \"https://auth.europe-west1.gcp.commercetools.com\"]\n  --batchSize, -b   Number of CSV rows to handle simultaneously.  [default: 100]\n  --delimiter, -d   Used CSV delimiter.                           [default: \",\"]\n  --accessToken     CTP client access token\n  --projectKey, -p  API project key.                                  [required]\n  --logLevel        Logging level: error, warn, info or verbose.\n                                                               [default: \"info\"]\n  --logFile         Path to file where to save logs.\n                                                 [default: \"csvparserprice.log\"]\n</code></pre> <p>Note that when the stdout is used as an output stream all log messages are written by default to <code>csvparserprice.log</code> log file.</p>"},{"location":"cli/csv-parser-price/#js","title":"JS","text":"<pre><code>const fs = require('fs')\nconst CsvParserPrice = require('@commercetools/csv-parser-price')\n\nconst csvParserPrice = new CsvParserPrice(\n  {\n    projectKey: process.env.CT_PROJECT_KEY,\n    credentials: {\n      clientId: process.env.CT_CLIENT_ID,\n      clientSecret: process.env.CT_CLIENT_SECRET,\n    },\n    accessToken: '&lt;tokenfromapi&gt;',\n  },\n  {\n    error: console.error,\n    warn: console.warn,\n    info: console.log,\n    verbose: console.log,\n  },\n  {\n    delimiter: '^',\n  }\n)\n\nconst outputStream = fs.createWriteStream('./output.json')\n\noutputStream.on('error', (err) =&gt; {\n  // handle error event\n})\n\ncsvParserPrice.parse(fs.createReadStream('./input.csv'), outputStream)\n</code></pre> <p>Errors on the level <code>error</code> come from events that are fatal and thus stop the stream of data.</p>"},{"location":"cli/csv-parser-price/#configuration","title":"Configuration","text":"<p><code>CsvParserPrice</code> accepts three objects as arguments:</p> <ul> <li>API client credentials for the authentication middleware (required)</li> <li>Logger takes object with four functions (optional)</li> <li>Config (optional)</li> <li><code>batchSize</code>: number of CSV rows to handle simultaneously. (default: <code>100</code>)</li> <li><code>delimiter</code>: the used CSV delimiter (default: <code>,</code>)</li> </ul> <p>Sample CSV file</p> <pre><code>variant-sku,value.currencyCode,value.centAmount,country,customerGroup.groupName,channel.key,validFrom,validUntil,customType,customField.foo,customField.bar,customField.current,customField.name.nl,customField.name.de,customField.status,customField.price,customField.priceset\nmy-price,EUR,4200,DE,customer-group,my-channel,2016-11-01T08:01:19+0000,2016-12-01T08:03:10+0000,custom-type,12,nac,true,Selwyn,Merkel,Ready,EUR 1200,\"1,2,3,5\"\nmy-price2,EUR,4200,DE,customer-group,my-channel,2016-11-01T08:01:19+0000,2016-12-01T08:03:10+0000,custom-type,12,nac,true,Selwyn,Merkel,Ready,EUR 1200,\"1,2,3,5\"\nmy-price,EUR,4200,DE,customer-group,my-channel,2016-11-01T08:01:19+0000,2016-12-01T08:03:10+0000,custom-type,12,nac,true,Selwyn,Merkel,Ready,EUR 1200,\"1,2,3,5\"\n</code></pre> <p>JSON object returned from the conversion of the CSV file above</p> <pre><code>{\n  \"prices\": [\n    {\n      \"sku\": \"my-price\",\n      \"prices\": [\n        {\n          \"value\": {\n            \"centAmount\": 4200,\n            \"fractionDigits\": 2,\n            \"type\": \"centPrecision\"\n          },\n          \"country\": \"DE\",\n          \"customerGroup\": {\n            \"id\": \"customer-group\"\n          },\n          \"channel\": {\n            \"id\": \"my-channel\"\n          },\n          \"validFrom\": \"2016-11-01T08:01:19+0000\",\n          \"validUntil\": \"2016-12-01T08:03:10+0000\",\n          \"custom\": {\n            \"type\": {},\n            \"fields\": {\n              \"foo\": 12\n            }\n          }\n        },\n        {\n          \"value\": {\n            \"centAmount\": 4200,\n            \"fractionDigits\": 2,\n            \"type\": \"centPrecision\"\n          },\n          \"country\": \"DE\",\n          \"customerGroup\": {\n            \"id\": \"customer-group\"\n          },\n          \"channel\": {\n            \"id\": \"my-channel\"\n          },\n          \"validFrom\": \"2016-11-01T08:01:19+0000\",\n          \"validUntil\": \"2016-12-01T08:03:10+0000\",\n          \"custom\": {\n            \"type\": {},\n            \"fields\": {\n              \"foo\": 12\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"sku\": \"my-price2\",\n      \"prices\": [\n        {\n          \"value\": {\n            \"centAmount\": 4200,\n            \"fractionDigits\": 2,\n            \"type\": \"centPrecision\"\n          },\n          \"country\": \"DE\",\n          \"customerGroup\": {\n            \"id\": \"customer-group\"\n          },\n          \"channel\": {\n            \"id\": \"my-channel\"\n          },\n          \"validFrom\": \"2016-11-01T08:01:19+0000\",\n          \"validUntil\": \"2016-12-01T08:03:10+0000\",\n          \"custom\": {\n            \"type\": {},\n            \"fields\": {\n              \"foo\": 12\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"cli/csv-parser-state/","title":"CSV Parser State","text":"<p>Convert commercetools states CSV data to JSON. See example below for CSV format, sample response and usage.</p>"},{"location":"cli/csv-parser-state/#usage","title":"Usage","text":"<p><code>npm install @commercetools/csv-parser-state --global</code></p>"},{"location":"cli/csv-parser-state/#cli","title":"CLI","text":"<pre><code>Usage: csv-parser-state.js [options]\nPackage to parse states from CSV to JSON\n\nOptions:\n  --help, -h                 Show help                                 [boolean]\n  --version, -v              Show version number                       [boolean]\n  --projectKey, -p           API project key                            [string]\n  --apiUrl                   The host URL of the HTTP API service\n                             [string] [default: \"https://api.commercetools.com\"]\n  --authUrl                  The host URL of the OAuth API service\n                            [string] [default: \"https://auth.commercetools.com\"]\n  --accessToken              CTP client access token\n                             Required scopes: ['view_orders']         [string]\n  --input, -i                Path to CSV file.                [default: \"stdin\"]\n  --output, -o               Path to output JSON file\n                                                    [string] [default: \"stdout\"]\n  --delimiter, -d            Used CSV delimiter.                  [default: \",\"]\n  --multiValueDelimiter, -m  Used CSV delimiter in multiValue fields.\n                                                                  [default: \";\"]\n  --continueOnProblems, -c   Flag if parsing should continue if module\n                             encounters an error.     [boolean] [default: false]\n  --logLevel                 Logging level: error, warn, info or debug\n                                                      [string] [default: \"info\"]\n  --prettyLogs               Pretty print logs to the terminal         [boolean]\n  --logFile                  Path to file where logs should be saved\n                                   [string] [default: \"csv-parser-state.log\"]\n</code></pre>"},{"location":"cli/csv-parser-state/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--projectKey</code> is only required if states have a <code>transitions</code> field containing one or more states that need to be resolved, otherwise it can be omitted. More info in the Examples below</li> <li>The <code>--input</code> flag specifies the path to the states CSV file. If this flag is omitted, the module will attempt to read the data from the <code>standard input</code>.</li> <li>The <code>--output</code> flag specifies where to output/save the parsed states as JSON file. Several notes on this flag:</li> <li>If the file specified already exists, it will be overwritten.</li> <li>If no output path is specified, the parsed states will be written to the standard output. As a result, status reports will be logged to a <code>csv-parser-state.log</code> file in the current directory.</li> <li>The <code>--delimiter</code> flag specifies the delimiter used in the input file. Defaults to <code>','</code> if omitted.</li> <li>The <code>--multiValueDelimiter</code> flag specifies the delimiter for multiValue cells in CSV. Note that only the <code>transitions</code> and <code>roles</code> fields if present should contain multiple values. Defaults to <code>';'</code> if omitted.</li> <li>The <code>--continueOnProblems</code> flag specifies if the module should continue parsing states if it encounters an error. Defaults to <code>false</code> if omitted.</li> <li>If the module should continue on error, all errors are logged to the logging location (see above).</li> <li>If the module should not continue on error, the failing error is written to the <code>stderr</code>, regardless of the output and logging locations</li> </ul>"},{"location":"cli/csv-parser-state/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly:</p> <pre><code>const fs = require('fs')\nconst CsvParserState = require('@commercetools/csv-parser-state')\n\nconst csvParser = new CsvParserState(configuration, logger)\n\nconst inputStream = fs.createReadStream('path-to-input-file.csv')\nconst outputStream = fs.createWriteStream('path-to-destination.json')\n\ncsvParser.parse(inputStream, outputStream)\n\n// Listen for events\noutputStream\n  .on('error', (error) =&gt; {\n    // &lt;- Handle errors here\n  })\n  .on('finish', () =&gt; {\n    // &lt;- Do something here\n  })\n</code></pre> <p>The constructor takes in 2 optional parameters</p> <ul> <li>A configuration object containing any/all of the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (only required if states have a <code>transitions</code> field containing one or more states that need to be resolved. See here)</li> <li><code>csvConfig</code> (Object): A configuration object for describing the CSV file:<ul> <li><code>delimiter</code> (String): Used delimiter in the CSV (Default: <code>','</code>)</li> <li><code>multiValueDelimiter</code> (String): Used delimiter in multiValue fields in the CSV (Default: <code>';'</code>)</li> </ul> </li> <li><code>accessToken</code> (String): Access token to be used to authenticate requests to API. Requires scope of [<code>view_orders</code>]</li> <li><code>continueOnProblems</code> (Boolean): Option if module should continue on errors (Default: <code>false</code>)</li> <li>A logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>)</li> </ul>"},{"location":"cli/csv-parser-state/#csv-notes","title":"CSV Notes","text":"<p>The CSV transitions in the CSV file should contain the list of state keys that can be transitioned to. This keys should be separated by the supplied <code>multiValueDelimiter</code>. A valid CSV file with valid transitions using the default <code>multiValueDelimiter</code> (<code>;</code>) is given below:</p> <pre><code>name.en,key,type,initial,transitions\nJames,state-key,OrderState,true,Initial;some-state-key;another-state-key\n</code></pre>"},{"location":"cli/csv-parser-state/#examples","title":"Examples","text":"<p>If we want to parse 3 states from CSV to JSON; with the following as input:</p> <pre><code>name.en,name.de,description.en,description.de,key,type,initial,transitions\nJames,Flo,some description,eine beschreibung,state-key-1,OrderState,true,Initial\nEaster,Oster,some description 4,eine beschreibung 4,state-key-2,ProductState,false,Initial;some-state-key;another-state-key\nAscension,Feiertag,some good description 5,eine gute beschreibung 5,state-key-3,LineItemState,false,\n</code></pre> <p>Using the CLI, we could run the following command:</p> <pre><code>csv-parser-state -p my-project-key -i /path-to-input-file.csv -o /path-to-output.json\n</code></pre> <p>And the following would be written to the JSON file</p> <pre><code>[\n  {\n    \"name\": {\n      \"en\": \"James\",\n      \"de\": \"Flo\"\n    },\n    \"description\": {\n      \"en\": \"some description\",\n      \"de\": \"eine beschreibung\"\n    },\n    \"key\": \"state-key-1\",\n    \"type\": \"OrderState\",\n    \"initial\": true,\n    \"transitions\": [\n      {\n        \"typeId\": \"state\",\n        \"id\": \"&lt;Initial-state-id&gt;\"\n      }\n    ]\n  },\n  {\n    \"name\": {\n      \"en\": \"Easter\",\n      \"de\": \"Oster\"\n    },\n    \"description\": {\n      \"en\": \"some description 4\",\n      \"de\": \"eine beschreibung 4\"\n    },\n    \"key\": \"state-key-2\",\n    \"type\": \"ProductState\",\n    \"initial\": false,\n    \"transitions\": [\n      {\n        \"typeId\": \"state\",\n        \"id\": \"&lt;Initial-state-id&gt;\"\n      },\n      {\n        \"typeId\": \"state\",\n        \"id\": \"&lt;some-state-id&gt;\"\n      },\n      {\n        \"typeId\": \"state\",\n        \"id\": \"&lt;another-state-id&gt;\"\n      }\n    ]\n  },\n  {\n    \"name\": {\n      \"en\": \"Ascension\",\n      \"de\": \"Feiertag\"\n    },\n    \"description\": {\n      \"en\": \"some good description 5\",\n      \"de\": \"eine gute beschreibung 5\"\n    },\n    \"key\": \"state-key-3\",\n    \"type\": \"LineItemState\",\n    \"initial\": false\n  }\n]\n</code></pre>"},{"location":"cli/custom-objects-exporter/","title":"Custom Objects Exporter","text":"<p>A package which exports commercetools custom objects in <code>JSON</code> format from the commercetools platform.</p>"},{"location":"cli/custom-objects-exporter/#configuration","title":"Configuration","text":"<p>The constructor accepts two arguments:</p> <ul> <li>A required object containing the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>accessToken</code> (String): [Access token] to be used to authenticate requests to API. Requires scope of [<code>view_products</code>, <code>view_orders</code>, <code>view_customers</code>]. More info on how to get the access token here</li> <li><code>predicate</code> (String): Query string specifying (where) predicate. More info on predicates here (Optional)</li> <li>An optional logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>)</li> </ul>"},{"location":"cli/custom-objects-exporter/#usage","title":"Usage","text":"<p><code>npm install @commercetools/custom-objects-exporter --global</code></p>"},{"location":"cli/custom-objects-exporter/#cli","title":"CLI","text":"<pre><code>Usage: custom-objects-exporter [options]\nExport custom objects from the commercetools platform\n\nOptions:\n  --help                     Show help text.                           [boolean]\n  --version                  Show version number                       [boolean]\n  --output, -o               Path to output file.            [default: \"stdout\"]\n  --apiUrl                   The host URL of the HTTP API service.\n                                              [default: \"https://api.europe-west1.gcp.commercetools.com\"]\n  --authUrl                  The host URL of the OAuth API service.\n                                             [default: \"https://auth.europe-west1.gcp.commercetools.com\"]\n  --accessToken              CTP client access token\n  --projectKey, -p           API project key.                         [required]\n  --where, -w                specify where predicate\n  --logLevel                 Logging level: error, warn, info or debug.\n                                                               [default: \"info\"]\n  --prettyLogs               Pretty print logs to the terminal         [boolean]\n  --logFile                  Path to file where to save logs.\n                                           [default: \"custom-objects-export.log\"]\n</code></pre>"},{"location":"cli/custom-objects-exporter/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--output</code> flag specifies where to output/save the exported custom objects. Several notes on this flag:</li> <li>If the file specified already exists, it will be overwritten.</li> <li>The default location for status report logging is the standard output.</li> <li>If no output path is specified, the exported objects will be logged to the standard output as a result, status reports will be logged to a <code>custom-objects-export.log</code> file in the current directory.</li> <li>The <code>where</code> flag specifies an optional (where) query predicate to be included in the request. This predicate should be wrapped in single quotes ('single quoted predicate'). More info on predicates here</li> </ul>"},{"location":"cli/custom-objects-exporter/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly:</p> <pre><code>import CustomObjectsExport from '@commercetools/custom-objects-exporter'\nimport fs from 'fs'\n\nconst options = {\n    apiConfig: {\n      apiUrl: 'https://api.europe-west1.gcp.commercetools.com'\n      host: 'https://auth.europe-west1.gcp.commercetools.com'\n      project_key: &lt;PROJECT_KEY&gt;,\n      credentials: {\n        clientId: '*********',\n        clientSecret: '*********'\n      }\n    },\n    accessToken: '123456yuhgfdwegh675412wefb3rgb',\n    predicate: 'key=\"desired-key\"'\n  }\n}\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  debug: console.debug,\n}\n\nconst CustomObjectsExport = new CustomObjectsExport(options, logger)\n\n// Register error listener\noutputStream.on('error', errorHandler)\n\noutputStream.on('finish', () =&gt; console.log('done with export'))\n\nCustomObjectsExport.run(outputStream)\n</code></pre>"},{"location":"cli/custom-objects-importer/","title":"Custom Objects Importer","text":"<p>This package helps with importing commercetools custom objects in JSON format to the commercetools platform. The package is built to be used in conjunction with sphere-node-cli</p>"},{"location":"cli/custom-objects-importer/#configuration","title":"Configuration","text":"<p>The constructor accepts five arguments:</p> <ul> <li>A required object containing the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>accessToken</code> (String): Access token to be used to authenticate requests to API. Requires scope of [<code>view_products</code>, <code>view_orders</code>, <code>view_customers</code>, <code>manage_products</code>, <code>manage_orders</code>, <code>manage_customers</code>].</li> <li><code>batchSize</code> (Number): Amount of custom objects to process concurrently (Optional. Default: 50)</li> <li><code>continueOnProblems</code> (Boolean): Flag whether to continue processing if an error occurs (Optional. Default: false)</li> <li>An optional logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>)</li> </ul>"},{"location":"cli/custom-objects-importer/#usage-with-sphere-node-cli","title":"Usage with <code>sphere-node-cli</code>","text":"<p>You can use this package from the <code>sphere-node-cli</code>. In order for the cli to import custom objects, the file to import from must be a valid JSON and follow the following structure:</p> <pre><code>[{\n        \"container\": \"Ludus\",\n        \"key\": \"copperKey\",\n        \"value\": {\n            \"paymentMethod\": \"Cash\",\n            \"paymentID\": \"1\",\n            \"whateverElse\": {\n                \"number\": 1000\n            }\n        }\n    },\n    {\n        \"container\": \"Frobozz\",\n        \"key\": \"jadeKey\",\n        \"value\": {\n            \"paymentMethod\": \"cc\",\n            \"paymentID\": \"2\",\n            \"whateverElse\": {\n                \"digits\": [1, 2, 3]\n            }\n        }\n    },\n    {\n        \"container\": \"Syrinx\",\n        \"key\": \"crystalKey\",\n        \"value\": {\n            \"paymentMethod\": \"new\",\n            \"paymentID\": \"3\",\n            \"whateverElse\": {\n                \"true\": true\n            }\n        }\n    }\n  ...\n]\n</code></pre> <p>Then you can import this file using the cli:</p> <pre><code>sphere import -t customObject -p my-project-key --host 'https://api.europe-west1.gcp.commercetools.com' --authHost 'https://auth.europe-west1.gcp.commercetools.com' -f /path/to/file.json -c\n'{\"continueOnProblems\": true}'\n</code></pre>"},{"location":"cli/custom-objects-importer/#direct-usage","title":"Direct Usage","text":"<p>You can also use this module directly in your Javascript project. To do this, you need to install it:</p> <pre><code>npm install @commercetools/custom-objects-importer\n</code></pre> <p>Then you can use it to import custom objects:</p> <pre><code>import CustomObjectsImport from '@commercetools/custom-objects-importer'\n\nconst customObjectsToImport = [\n  {\n    container: 'Ludus',\n    key: 'copperKey',\n    value: {\n      paymentMethod: 'Cash',\n      paymentID: '1',\n      whateverElse: {\n        number: 1000\n      }\n    },\n  },\n  {\n    container: 'Frobozz',\n    key: 'jadeKey',\n    value: {\n      paymentMethod: 'cc',\n      paymentID: '2',\n      whateverElse: {\n        digits: [1,2,3]\n      }\n    },\n  },\n  {\n    container: 'Syrinx',\n    key: 'crystalKey',\n    value: {\n      paymentMethod: 'new',\n      paymentID: '3',\n      whateverElse: {\n        true: false\n      }\n    },\n  },\n  ...\n]\n\nconst options = {\n    apiConfig: {\n      host: 'https://auth.commercetools.com'\n      projectKey: &lt;PROJECT_KEY&gt;,\n      credentials: {\n        clientId: '*********',\n        clientSecret: '*********'\n      }\n    },\n    accessToken: '123456yuhgfdwegh675412wefb3rgb',\n    continueOnProblems: false\n  }\n}\n\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  debug: console.debug,\n}\n\nconst customObjectsImport = new CustomObjectsImport(options, logger)\n\ncustomObjectsImport.run(customObjectsToImport)\n  .then(() =&gt; {\n    customObjectsImport.summaryReport()\n    // handle successful import\n  })\n  .catch((error) =&gt; {\n    // handle error\n  })\n</code></pre> <p>On successful completion, a call to the <code>.summaryReport()</code> method returns a report in the following format:</p> <pre><code>{\n  reportMessage: 'Summary: there were 4 successfully imported custom objects. 2 were newly created, 2 were updated and 0 were unchanged.)',\n  detailedSummary: {\n    createErrorCount: 0,\n    created: 2,\n    errors: [],\n    unchanged: 0,\n    updateErrorCount: 0,\n    updated: 2\n  }\n}\n</code></pre> <p>Note: By default, if a custom object exists, the module tries to build an update action for it, and if no update action can be built, the custom object will be ignored</p>"},{"location":"cli/customer-groups-exporter/","title":"Customer Groups Exporter","text":"<p>A package which exports commercetools customer groups in <code>JSON</code> format from the commercetools platform.</p>"},{"location":"cli/customer-groups-exporter/#configuration","title":"Configuration","text":"<p>The constructor accepts two arguments:</p> <ul> <li>A required object containing the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>accessToken</code> (String): [Access token] to be used to authenticate requests to API. Requires scope of [<code>view_customers</code>]. More info on how to get the access token here</li> <li><code>predicate</code> (String): Query string specifying (where) predicate. More info on predicates here (Optional)</li> <li>An optional logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>)</li> </ul>"},{"location":"cli/customer-groups-exporter/#usage","title":"Usage","text":"<p><code>npm install @commercetools/customer-groups-exporter --global</code></p>"},{"location":"cli/customer-groups-exporter/#cli","title":"CLI","text":"<pre><code>Usage: customer-groups-exporter [options]\nExport customer groups from the commercetools platform\n\nOptions:\n  --help                     Show help text.                           [boolean]\n  --version                  Show version number                       [boolean]\n  --output, -o               Path to output file.            [default: \"stdout\"]\n  --apiUrl                   The host URL of the HTTP API service.\n                                              [default: \"https://api.europe-west1.gcp.commercetools.com\"]\n  --authUrl                  The host URL of the OAuth API service.\n                                             [default: \"https://auth.europe-west1.gcp.commercetools.com\"]\n  --accessToken              CTP client access token\n  --projectKey, -p           API project key.                         [required]\n  --where, -w                specify where predicate\n  --logLevel                 Logging level: error, warn, info or debug.\n                                                               [default: \"info\"]\n  --prettyLogs               Pretty print logs to the terminal         [boolean]\n  --logFile                  Path to file where to save logs.\n                                           [default: \"customer-groups-export.log\"]\n</code></pre>"},{"location":"cli/customer-groups-exporter/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--output</code> flag specifies where to output/save the exported customer groups. Several notes on this flag:</li> <li>If the file specified already exists, it will be overwritten.</li> <li>The default location for status report logging is the standard output.</li> <li>If no output path is specified, the exported groups will be logged to the standard output as a result, status reports will be logged to a <code>customer-groups-export.log</code> file in the current directory.</li> <li>The <code>where</code> flag specifies an optional (where) query predicate to be included in the request. This predicate should be wrapped in single quotes ('single quoted predicate'). More info on predicates here</li> </ul>"},{"location":"cli/customer-groups-exporter/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly:</p> <pre><code>import CustomerGroupsExport from '@commercetools/customer-groups-exporter'\nimport fs from 'fs'\n\nconst options = {\n    apiConfig: {\n      apiUrl: 'https://api.europe-west1.gcp.commercetools.com'\n      host: 'https://auth.europe-west1.gcp.commercetools.com'\n      project_key: &lt;PROJECT_KEY&gt;,\n      credentials: {\n        clientId: '*********',\n        clientSecret: '*********'\n      }\n    },\n    accessToken: '123456yuhgfdwegh675412wefb3rgb',\n    predicate: 'key=\"desired-key\"'\n  }\n}\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  debug: console.debug,\n}\n\nconst CustomerGroupsExport = new CustomerGroupsExport(options, logger)\n\n// Register error listener\noutputStream.on('error', errorHandler)\n\noutputStream.on('finish', () =&gt; console.log('done with export'))\n\nCustomerGroupsExport.run(outputStream)\n</code></pre>"},{"location":"cli/discount-code-exporter/","title":"Discount Code Exporter","text":"<p>A package that helps with exporting commercetools discount codes in <code>JSON</code> or <code>CSV</code> format from the commercetools platform.</p>"},{"location":"cli/discount-code-exporter/#configuration","title":"Configuration","text":"<p>The constructor accepts two arguments:</p> <ul> <li>A required object containing the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>batchSize</code> (Number): Amount of codes not more than 500 to process concurrently (Optional. Default: 500)</li> <li><code>language</code> (String): Language used for localised fields if no template is given (Optional. Default: <code>'en'</code>)</li> <li><code>accessToken</code> (String): Access token to be used to authenticate requests to API. Requires scope of [<code>view_orders</code>]</li> <li><code>delimiter</code> (String): CSV delimiter (Optional. Default: <code>','</code>)</li> <li><code>multiValueDelimiter</code> (String): CSV delimiter used in multivalue fields (Optional. Default: <code>';'</code>)</li> <li><code>exportFormat</code> (String): Export format ['csv', 'json'] (Optional. Default: 'json')</li> <li><code>predicate</code> (String): Query string specifying (where) predicate. More info on predicates here (Optional)</li> <li><code>fields</code> (Array): An array of column names the exported CSV file should contain. This fields array should contain the required columns of the CSV file (Optional. If omitted, a default set of column fields is used. Currently, these fields are: <code>name</code>, <code>description</code>, <code>code</code>, <code>cartDiscounts</code>,<code>cartPredicate</code>,<code>groups</code>,<code>isActive</code>,<code>validFrom</code>,<code>validUntil</code>,<code>references</code>,<code>maxApplications</code>,<code>maxApplicationsPerCustomer</code>.     The localised fields (<code>name</code> and <code>description</code> default to the language specified in the <code>language</code> value above.     This is synonymous with the <code>--template</code> flag in the CLI) <li>An optional logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>verbose</code>)</li>"},{"location":"cli/discount-code-exporter/#usage","title":"Usage","text":"<p><code>npm install @commercetools/discount-code-exporter --global</code></p>"},{"location":"cli/discount-code-exporter/#cli","title":"CLI","text":"<pre><code>Usage: bin/discount-code-exporter.js [options]\nExport discount codes from the commercetools platform.\n\nOptions:\n  --help, -h                 Show help text.                           [boolean]\n  --version                  Show version number                       [boolean]\n  --template, -t             Path to CSV template.\n  --language, -l             Language used for localised fields (such as `name`\n                             and `description`) when exporting without template.\n                             This field is ignored for exports with template\n                                                                 [default: \"en\"]\n  --output, -o               Path to output file.            [default: \"stdout\"]\n  --apiUrl                   The host URL of the HTTP API service.\n                                              [default: \"https://api.europe-west1.gcp.commercetools.com\"]\n  --authUrl                  The host URL of the OAuth API service.\n                                             [default: \"https://auth.europe-west1.gcp.commercetools.com\"]\n  --delimiter, -d            Used CSV delimiter.                  [default: \",\"]\n  --multiValueDelimiter, -m  Used CSV delimiter in multiValue fields.\n                                                                  [default: \";\"]\n  --accessToken              CTP client access token\n  --projectKey, -p           API project key.                         [required]\n  --where, -w                specify where predicate\n  --exportFormat, -f         Format for export\n                                      [choices: \"csv\", \"json\"] [default: \"json\"]\n  --batchSize, -b            Number of codes to exports in a chunk[default: 500]\n  --logLevel                 Logging level: error, warn, info or verbose.\n                                                               [default: \"info\"]\n  --logFile                  Path to file where to save logs.\n                                           [default: \"discount-code-export.log\"]\n</code></pre>"},{"location":"cli/discount-code-exporter/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--output</code> flag specifies where to output/save the exported discount codes. Several notes on this flag:</li> <li>If the file specified already exists, it will be overwritten.</li> <li>The default location for status report logging is the standard output.</li> <li>If no output path is specified, the exported codes will be logged to the standard output as a result, status reports will be logged to a <code>discount-code-export.log</code> file in the current directory.</li> <li>The <code>--delimiter</code> flag specifies the delimiter used in the output file if CSV. Defaults to <code>','</code> if omitted.</li> <li>The <code>--multiValueDelimiter</code> flag specifies the delimiter for multiValue cells in the output file if CSV. Defaults to <code>';'</code> if omitted.</li> <li>The <code>where</code> flag specifies an optional (where) query predicate to be included in the request. This predicate should be wrapped in single quotes ('single quoted predicate'). More info on predicates here</li> </ul>"},{"location":"cli/discount-code-exporter/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly:</p> <pre><code>import DiscountCodeExport from '@commercetools/discount-code-exporter'\nimport fs from 'fs'\n\nconst options = {\n    apiConfig: {\n      apiUrl: 'https://api.europe-west1.gcp.commercetools.com'\n      host: 'https://auth.europe-west1.gcp.commercetools.com'\n      project_key: &lt;PROJECT_KEY&gt;,\n      credentials: {\n        clientId: '*********',\n        clientSecret: '*********'\n      }\n    },\n    batchSize: 100,\n    accessToken: '123456yuhgfdwegh675412wefb3rgb',\n    delimiter: ',',\n    multiValueDelimiter: ';',\n    exportFormat: 'csv',\n    predicate: 'cartDiscounts(id=\"desired-cart-discount-id\")',\n    fields: ['code', 'name.en', 'name.de', 'cartDiscounts']\n  }\n}\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  verbose: console.debug,\n}\n\nconst discountCodeExport = new DiscountCodeExport(options, logger)\n\n// Register error listener\noutputStream.on('error', errorHandler)\n\noutputStream.on('finish', () =&gt; console.log('done with export'))\n\ndiscountCodeExport.run(outputStream)\n</code></pre>"},{"location":"cli/discount-code-generator/","title":"Discount Code Generator","text":"<p>Generate unique discount codes to be imported to the commercetools platform. See usage below</p>"},{"location":"cli/discount-code-generator/#usage","title":"Usage","text":"<p><code>npm install @commercetools/discount-code-generator --global</code></p>"},{"location":"cli/discount-code-generator/#cli","title":"CLI","text":"<pre><code>Usage: discount-code-gen [options]\n\nOptions:\n  --help, -h                 Show help text.                                                     [boolean]\n  --version, -v              Show version number.                                                [boolean]\n  --quantity, -q             Quantity of discount codes to generate. (Between 1 and 500000)     [required]\n  --code-length, -l          Length of the discount codes to generate.                       [default: 11]\n  --code-prefix, -p          Prefix for each code. No prefix will be used if omitted.        [default: \"\"]\n  --input, -i                Path to code options CSV or JSON file.\n  --output, -o               Path to store generated output file.                      [default: \"stdout\"]\n  --delimiter, -d            Used CSV delimiter for input and/or output file.               [default: \",\"]\n  --multiValueDelimiter, -m  Used CSV delimiter in multiValue fields for input/output file. [default: \";\"]\n  --logLevel,                Logging level: error, warn, info or verbose.                [default: \"info\"]\n</code></pre>"},{"location":"cli/discount-code-generator/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--quantity</code> flag represents the number of codes to be generated. It must be a number between 1 and 500000</li> <li>The <code>--code-length</code> flag is used to customise the discount codes according to individual use cases. (more info in Examples)</li> <li>The <code>--input</code> flag specifies the path to a CSV or JSON file containing the options the discount codes should have. If this flag is omitted, discount codes without any attributes will be generated.</li> <li>The <code>--output</code> flag specifies where to output/save the generated codes. Several notes on this flag:</li> <li>The format of the generated output will depend on the format of the file specified here. It must be CSV or JSON as these are the only supported formats.</li> <li>If the file specified already exists, it will be overwritten.</li> <li>The default location for status report logging is the standard output.</li> <li>If no output path is specified, the generated codes will be logged to the standard output as a result, status reports will be logged to a <code>discountCodeGenerator.log</code> file</li> <li>The <code>--delimiter</code> flag specifies the delimiter used in the input file and/or output file if any or both are CSV. Defaults to <code>','</code> if omitted and will be ignored if neither input nor output is CSV</li> <li>The <code>--multiValueDelimiter</code> flag specifies the delimiter for multiValue cells in CSV. Note that only the <code>cartDiscounts</code> field if present should contain multiple values. Defaults to <code>';'</code> if omitted</li> </ul>"},{"location":"cli/discount-code-generator/#examples","title":"Examples","text":""},{"location":"cli/discount-code-generator/#csv","title":"CSV","text":"<p>If we want to generate 3 discount codes, each having 9 characters(code-length), 'FOO' as prefix, and having the following data stored in a CSV file:</p> <pre><code>name.en,name.de,description.en,description.de,cartDiscounts,cartPredicate,isActive,maxApplications,maxApplicationsPerCustomer\nSammy,Valerian,greatest promo,super angebot,good;better;best,value more than 20,true,10,2\n</code></pre> <p>and also wanting a CSV output, we would run the following command</p> <pre><code>discount-code-generator -i /path-to-code-data/input.csv -o /path-to-write-data/output.csv -q 3 -l 9 -p FOO\n</code></pre> <p>The following would be written to the output file:</p> <pre><code>\"name.en\",\"name.de\",\"description.en\",\"description.de\",\"cartDiscounts\",\"cartPredicate\",\"isActive\",\"maxApplications\",\"maxApplicationsPerCustomer\",\"code\"\n\"Sammy\",\"Valerian\",\"greatest promo\",\"super angebot\",\"good;better;best\",\"value more than 20\",\"true\",\"10\",\"2\",\"FOObcXdOd\"\n\"Sammy\",\"Valerian\",\"greatest promo\",\"super angebot\",\"good;better;best\",\"value more than 20\",\"true\",\"10\",\"2\",\"FOOiNfQyy\"\n\"Sammy\",\"Valerian\",\"greatest promo\",\"super angebot\",\"good;better;best\",\"value more than 20\",\"true\",\"10\",\"2\",\"FOONtF2XL\"\n</code></pre>"},{"location":"cli/discount-code-generator/#json","title":"JSON","text":"<p>If we want to generate 3 discount codes, each having 9 characters(code-length), 'FOO' as prefix, and having the following data stored in a JSON file:</p> <pre><code>{\n  \"name\": {\n   \"en\": \"Sammy\",\n   \"de\": \"Valerian\"\n  },\n  \"description\": {\n   \"en\": \"greatest promo\",\n   \"de\": \"super angebot\"\n  },\n  \"cartDiscounts\": [\n   {\n    \"typeId\": \"cart-discount\",\n    \"id\": \"good\"\n   },\n   {\n    \"typeId\": \"cart-discount\",\n    \"id\": \"better\"\n   },\n   {\n    \"typeId\": \"cart-discount\",\n    \"id\": \"best\"\n   }\n  ],\n  \"cartPredicate\": \"value more than 20\",\n  \"isActive\": \"true\",\n  \"maxApplications\": \"10\",\n  \"maxApplicationsPerCustomer\": \"2\"\n}\n</code></pre> <p>and also wanting a JSON output, we would run the following command</p> <pre><code>discount-code-gen -i /path-to-code-data/input.json -o /path-to-write-data/output.json -q 3 -l 9 -p FOO\n</code></pre> <p>The following would be written to the output file:</p> <pre><code>;[\n  {\n    name: {\n      en: 'Sammy',\n      de: 'Valerian',\n    },\n    description: {\n      en: 'greatest promo',\n      de: 'super angebot',\n    },\n    cartDiscounts: [\n      {\n        typeId: 'cart-discount',\n        id: 'good',\n      },\n      {\n        typeId: 'cart-discount',\n        id: 'better',\n      },\n      {\n        typeId: 'cart-discount',\n        id: 'best',\n      },\n    ],\n    cartPredicate: 'value more than 20',\n    isActive: 'true',\n    maxApplications: '10',\n    maxApplicationsPerCustomer: '2',\n    code: 'FOOnxqrck',\n  },\n  {\n    name: {\n      en: 'Sammy',\n      de: 'Valerian',\n    },\n    description: {\n      en: 'greatest promo',\n      de: 'super angebot',\n    },\n    cartDiscounts: [\n      {\n        typeId: 'cart-discount',\n        id: 'good',\n      },\n      {\n        typeId: 'cart-discount',\n        id: 'better',\n      },\n      {\n        typeId: 'cart-discount',\n        id: 'best',\n      },\n    ],\n    cartPredicate: 'value more than 20',\n    isActive: 'true',\n    maxApplications: '10',\n    maxApplicationsPerCustomer: '2',\n    code: 'FOOlFeNRb',\n  },\n  {\n    name: {\n      en: 'Sammy',\n      de: 'Valerian',\n    },\n    description: {\n      en: 'greatest promo',\n      de: 'super angebot',\n    },\n    cartDiscounts: [\n      {\n        typeId: 'cart-discount',\n        id: 'good',\n      },\n      {\n        typeId: 'cart-discount',\n        id: 'better',\n      },\n      {\n        typeId: 'cart-discount',\n        id: 'best',\n      },\n    ],\n    cartPredicate: 'value more than 20',\n    isActive: 'true',\n    maxApplications: '10',\n    maxApplicationsPerCustomer: '2',\n    code: 'FOO8LoJD3',\n  },\n]\n</code></pre>"},{"location":"cli/discount-code-generator/#additional-info","title":"Additional Info","text":"<ul> <li>The <code>cartDiscounts</code> field in the csv should contain only the cart-discount IDs</li> <li>The JSON output option outputs an array of json objects</li> <li>The input and output formats are interchangeable; that means JSON output can be requested with a CSV input and vice versa</li> <li>All fields in the input are optional. However, the file must not be empty.</li> <li>The input option can be left out completely if no code attributes are required</li> </ul>"},{"location":"cli/discount-code-importer/","title":"Discount Code Importer","text":"<p>A package that helps with importing commercetools discount codes in JSON format to the commercetools platform. This package is built to be used in conjunction with sphere-node-cli</p>"},{"location":"cli/discount-code-importer/#configuration","title":"Configuration","text":"<p>The constructor accepts two arguments:</p> <ul> <li>A required object containing the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>accessToken</code> (String): Access token to be used to authenticate requests to API. Requires scope of [<code>manage_orders</code>]</li> <li><code>batchSize</code> (Number): Amount of codes not more than 500 to process concurrently (Optional. Default: 50)</li> <li><code>continueOnProblems</code> (Boolean): Flag whether to continue processing if an error occurs (Optional. Default: false)</li> <li>An optional logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>verbose</code>)</li> </ul>"},{"location":"cli/discount-code-importer/#usage-with-sphere-node-cli","title":"Usage with <code>sphere-node-cli</code>","text":"<p>You can use this package from the <code>sphere-node-cli</code>. In order for the cli to import discount codes, the file to import from must be a valid JSON and follow this structure:</p> <pre><code>[\n {\n  \"name\": {\n   \"en\": \"Sammuy\",\n   \"de\": \"Valerian\"\n  },\n  \"description\": {\n   \"en\": \"some new promo\",\n   \"de\": \"super Angebot\"\n  },\n  \"cartDiscounts\": [\n   {\n    \"typeId\": \"cart-discount\",\n    \"id\": \"some-cart-discount-id\"\n   }\n  ],\n  \"cartPredicate\": \"lineItemTotal(1 = 1) &gt;  \\\"10.00 USD\\\"\",\n  \"isActive\": true,\n  \"maxApplications\": 10,\n  \"maxApplicationsPerCustomer\": 2,\n  \"code\": \"MyDiscountCode1\"\n },\n {\n  \"name\": {\n   \"en\": \"Sammuy\",\n   \"de\": \"Valerian\"\n  },\n  \"description\": {\n   \"en\": \"some new promo\",\n   \"de\": \"super Angebot\"\n  },\n  \"cartDiscounts\": [\n   {\n    \"typeId\": \"cart-discount\",\n    \"id\": \"some-cart-discount-id\"\n   }\n  ],\n  \"cartPredicate\": \"lineItemTotal(1 = 1) &gt;  \\\"20.00 USD\\\"\",\n  \"isActive\": false,\n  \"maxApplications\": 10,\n  \"maxApplicationsPerCustomer\": 2,\n  \"code\": \"MyDiscountCode2\"\n },\n {\n  \"name\": {\n   \"en\": \"Sammuy\",\n   \"de\": \"Valerian\"\n  },\n  \"description\": {\n   \"en\": \"some new promo\",\n   \"de\": \"super Angebot\"\n  },\n  \"cartDiscounts\": [\n   {\n    \"typeId\": \"cart-discount\",\n    \"id\": \"some-cart-discount-id\"\n   }\n  ],\n  \"cartPredicate\": \"lineItemTotal(1 = 1) &gt;  \\\"50.00 USD\\\"\",\n  \"isActive\": false,\n  \"maxApplications\": 10,\n  \"maxApplicationsPerCustomer\": 2,\n  \"code\": \"MyDiscountCode3\"\n },\n ...\n]\n</code></pre> <p>Then you can import this file using the cli:</p> <pre><code>sphere-node-cli -t discountCode -p my-project-key -f /sample_dir/codes.json\n</code></pre> <p>Custom optional configuration can be passed in as described above using the <code>-c</code> flag</p> <pre><code>sphere-node-cli -t discountCode -p my-project-key -f /sample_dir/codes.json -b 20 -c '{ \"continueOnProblems\": true }'\n</code></pre>"},{"location":"cli/discount-code-importer/#direct-usage","title":"Direct Usage","text":"<p>If you would like to have more control, you can also use this module directly in Javascript. To do this, you need to install it:</p> <pre><code>npm install @commercetools/discount-code-importer\n</code></pre> <p>Then you can use it to import discount codes:</p> <pre><code>import DiscountCodeImport from '@commercetools/discount-code-importer'\n\nconst codes = [\n {\n  name: {\n   en: 'Sammuy',\n   de: 'Valerian'\n  },\n  description: {\n   en: 'some new promo',\n   de: 'super Angebot'\n  },\n  cartDiscounts: [\n   {\n    typeId: 'cart-discount',\n    id: 'some-cart-discount-id'\n   }\n  ],\n  cartPredicate: 'lineItemTotal(1 = 1) &gt; \"10.00 USD\"',\n  isActive: true,\n  maxApplications: 10,\n  maxApplicationsPerCustomer: 2,\n  code: 'MyDiscountCode1'\n },\n {\n  name: {\n   en: 'Sammuy',\n   de: 'Valerian'\n  },\n  description: {\n   en: 'some new promo',\n   de: 'super Angebot'\n  },\n  cartDiscounts: [\n   {\n    typeId: 'cart-discount',\n    id: 'some-cart-discount-id'\n   }\n  ],\n  cartPredicate: 'lineItemTotal(1 = 1) &gt; \"20.00 USD\"',\n  isActive: false,\n  maxApplications: 10,\n  maxApplicationsPerCustomer: 2,\n  code: 'MyDiscountCode2'\n },\n {\n  name: {\n   en: 'Sammuy',\n   de: 'Valerian'\n  },\n  description: {\n   en: 'some new promo',\n   de: 'super Angebot'\n  },\n  cartDiscounts: [\n   {\n    typeId: 'cart-discount',\n    id: 'some-cart-discount-id'\n   }\n  ],\n  cartPredicate: 'lineItemTotal(1 = 1) &gt; \"50.00 USD\"',\n  isActive: false,\n  maxApplications: 10,\n  maxApplicationsPerCustomer: 2,\n  code: 'MyDiscountCode3'\n },\n ...\n]\n\nconst options = {\n    apiConfig: {\n      host: 'https://auth.commercetools.com'\n      project_key: &lt;PROJECT_KEY&gt;,\n      credentials: {\n        clientId: '*********',\n        clientSecret: '*********'\n      }\n    },\n    accessToken: '123456yuhgfdwegh675412wefb3rgb',\n    batchSize: 20,\n    continueOnProblems: true\n  }\n}\nconst discountCodeImport = new DiscountCodeImport(options)\n\ndiscountCodeImport.run(codes)\n  .then(() =&gt; {\n  discountCodeImport.summaryReport()\n  // handle successful import\n  })\n  .catch((error) =&gt; {\n  // handle error\n  })\n</code></pre> <p>On successful completion, a call to the <code>.summaryReport()</code> method returns a report in the following format:</p> <pre><code>{\n  reportMessage: 'Summary: there were 5 successfully imported discount codes (3 were newly created, 2 were updated and 0 were unchanged).',\n  detailedSummary: {\n    created: 3,\n    updated: 2,\n    unchanged: 0,\n    createErrorCount: 0,\n    updateErrorCount: 0,\n    errors: []\n  }\n}\n</code></pre> <p>Note: By default, if a discount code already exists, the module tries to build update actions for it, and if no update actions can be built, the code will be ignored</p>"},{"location":"cli/inventories-exporter/","title":"Inventories Exporter","text":"<p>This package helps in exporting inventories from the commercetools platform in <code>csv</code> and <code>json</code> format</p>"},{"location":"cli/inventories-exporter/#configuration","title":"Configuration","text":"<p>The constructor accepts four arguments:</p> <ul> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li>An optional logger object having four methods (<code>info</code>, <code>warn</code>, <code>error</code> and <code>verbose</code>)</li> <li><code>exportConfig</code> (Object): Internal Export configurations</li> <li><code>delimiter</code> (Object): CSV delimiter</li> <li><code>format</code> (Object): Export format 'csv', 'json'</li> <li><code>channelKey</code> (String): Channel key to use as filter for results to export. Useful if you have channel key but not <code>id</code> to build your queryString</li> <li><code>queryString</code> (String): Predicate to use to filter inventories to export</li> <li><code>accessToken</code> (String): Access token to be used to authenticate requests to API. Requires scope of [<code>view_products</code>]</li> </ul>"},{"location":"cli/inventories-exporter/#usage","title":"Usage","text":"<pre><code>npm install @commercetools/inventories-exporter --global\n</code></pre>"},{"location":"cli/inventories-exporter/#cli","title":"CLI","text":"<pre><code>Usage: inventoriesexporter [options]\nExport inventories from the commercetools platform.\n\nOptions:\n  --help, -h        Show help text.                                    [boolean]\n  --version         Show version number                                [boolean]\n  --outputFile, -o  Path to output file.                     [default: \"stdout\"]\n  --apiUrl          The host URL of the HTTP API service.\n                                              [default: \"https://api.europe-west1.gcp.commercetools.com\"]\n  --authUrl         The host URL of the OAuth API service.\n                                             [default: \"https://auth.europe-west1.gcp.commercetools.com\"]\n  --delimiter, -d   Used CSV delimiter.                           [default: \",\"]\n  --accessToken     CTP client access token\n  --projectKey, -p  API project key.                                  [required]\n  --channelKey, -c  Channel key to use as filter for result to export.\n                    Useful if you only have channel key but not id.\n                    Can be used with the query flag\n\n  --query, -q       Filter query for stocks:\n                    https://docs.commercetools.com/api/projects/inventory#query-inventory\n                    can be used with channelKey flag\n\n  --template, -t    Path to a CSV template file with headers which should be\n                    exported.\n  --format, -f      Format for export [choices: \"csv\", \"json\"] [default: \"json\"]\n  --logLevel        Logging level: error, warn, info or verbose.\n                                                               [default: \"info\"]\n  --logFile         Path to file where to save logs.\n                                           [default: \"inventories-exporter.log\"]\n</code></pre>"},{"location":"cli/inventories-exporter/#js","title":"JS","text":"<p>For direct usage</p> <pre><code>import InventoryExporter from '@commercetools/inventories-exporter'\nimport fs from 'fs'\n\nconst apiConfig = {\n  host: 'https://api.europe-west1.gcp.commercetools.com',\n  apiUrl: 'https://api.europe-west1.gcp.commercetools.com',\n  projectKey: 'node-test-project',\n  credentials: {\n    clientId: '123456hgfds',\n    clientSecret: '123456yuhgfdwegh675412wefb3rgb',\n  },\n}\nconst accessToken = args.accessToken\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  verbose: console.debug,\n}\nconst exportConfig = {\n  headerFields: null, // can contain an array of header fields which should be exported\n  delimiter: ',',\n  format: 'csv,\n  queryString: 'description=\"new stocks\"',\n}\nconst inventoryExporter = new InventoryExporter(\n  apiConfig,\n  logger,\n  exportConfig,\n  accessToken,\n)\n\nconst outputStream = fs.createWriteStream('inventories.csv')\n\n// Register error listener\noutputStream.on('error', errorHandler)\n\noutputStream.on('finish', () =&gt; console.log('done with export'))\n\ninventoryExporter.run(outputStream)\n</code></pre>"},{"location":"cli/personal-data-erasure/","title":"Personal Data Erasure","text":"<p>A package which deletes or exports commercetools personal data in <code>JSON</code> format from the commercetools Composable Commerce.</p>"},{"location":"cli/personal-data-erasure/#list-of-personal-data","title":"List of personal data","text":"<ul> <li>Customers</li> <li>Orders</li> <li>Carts</li> <li>Payments</li> <li>ShoppingLists</li> <li>Reviews</li> </ul>"},{"location":"cli/personal-data-erasure/#configuration","title":"Configuration","text":"<p>The constructor accepts two arguments:</p> <ul> <li>A required object containing the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>accessToken</code> (String): [Access token] to be used to authenticate requests to API. Requires scope of [<code>view_products</code>, <code>manage_products</code>, <code>view_orders</code>, <code>manage_orders</code>, <code>view_payments</code>, <code>manage_payments</code>, <code>view_shopping_lists</code>, <code>manage_shopping_lists</code>, <code>view_customers</code>, <code>manage_customers</code>]. More info on how to get the access token here</li> <li>An optional logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>)</li> </ul>"},{"location":"cli/personal-data-erasure/#usage","title":"Usage","text":"<p><code>npm install @commercetools/personal-data-erasure --global</code></p>"},{"location":"cli/personal-data-erasure/#cli","title":"CLI","text":"<pre><code>Usage: personal-data-erasure.js [options]\nExport and delete all data related to a single customer\n\nOptions:\n  --help            Show help text.                                    [boolean]\n  --version         Show version number                                [boolean]\n  --output, -o      Path to output file.                     [default: \"stdout\"]\n  --customerId, -c  Customer to fetch or delete.                      [required]\n  --apiUrl          The host URL of the HTTP API service.\n                                              [default: \"https://api.europe-west1.gcp.commercetools.com\"]\n  --authUrl         The host URL of the OAuth API service.\n                                             [default: \"https://auth.europe-west1.gcp.commercetools.com\"]\n  --accessToken     CTP client access token.\n  --projectKey, -p  API project key.                                  [required]\n  --deleteAll, -D   Delete all data related to customer.               [boolean]\n  --force           Continue without confirmation when combined with\n                    --deleteAll.                                       [boolean]\n  --logLevel        Logging level: error, warn, info or debug. [default: \"info\"]\n  --prettyLogs      Pretty print logs to the terminal                  [boolean]\n  --logFile         Path to where to save logs file.\n                                      [string] [default: \"personal-data-erasure.log\"]\n</code></pre>"},{"location":"cli/personal-data-erasure/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--deleteAll</code> flag deletes all information related to the customer and can not be undone.</li> <li>The <code>--output</code> flag specifies where to output/save the exported customer data. Several notes on this flag:</li> <li>If the file specified already exists, it will be overwritten.</li> <li>The default location for status report logging is the standard output.</li> <li>If no output path is specified, the exported data will be logged to the standard output as a result, status reports will be logged to a <code>personal-data-erasure.log</code> file in the current directory.</li> </ul>"},{"location":"cli/personal-data-erasure/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly:</p> <pre><code>import PersonalDataErasure from '@commercetools/personal-data-erasure'\n\nconst options = {\n    apiConfig: {\n      apiUrl: 'https://api.europe-west1.gcp.commercetools.com'\n      host: 'https://auth.europe-west1.gcp.commercetools.com'\n      project_key: &lt;PROJECT_KEY&gt;,\n      credentials: {\n        clientId: '*********',\n        clientSecret: '*********'\n      }\n    },\n    accessToken: '123456yuhgfdwegh675412wefb3rgb',\n  }\n}\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  debug: console.debug,\n}\n\nconst PersonalDataErasure = new PersonalDataErasure(options, logger)\n\n// function to get all data related to customer\nPersonalDataErasure.getCustomerData(outputStream)\n\n// function to delete all data related to customer\nPersonalDataErasure.deleteAll(outputStream)\n</code></pre>"},{"location":"cli/price-exporter/","title":"Price Exporter","text":"<p>A package that helps with exporting commercetools price in <code>JSON</code> or <code>CSV</code> format from the commercetools platform.</p>"},{"location":"cli/price-exporter/#configuration","title":"Configuration","text":"<p>The constructor accepts two arguments:</p> <ul> <li>A required object containing the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>accessToken</code> (String): Access token to be used to authenticate requests to API. Requires scope of [<code>view_orders</code>]</li> <li><code>delimiter</code> (String): CSV delimiter (Optional. Default: <code>','</code>)</li> <li><code>exportFormat</code> (String): Export format ['csv', 'json'] (Optional. Default: 'json')</li> <li><code>predicate</code> (String): Query string specifying (where) predicate. More info on predicates here (Optional)</li> <li><code>staged</code> (Boolean): Specify if prices should be fetched from all products (true) or only published products (false) (Optional. Default: false)</li> <li><code>csvHeaders</code> (Array): Array containing headers for the returned CSV price data. If omitted, all headers will be turned. (Optional) <li>An optional logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>verbose</code>)</li>"},{"location":"cli/price-exporter/#usage","title":"Usage","text":"<p><code>npm install @commercetools/price-exporter --global</code></p>"},{"location":"cli/price-exporter/#cli","title":"CLI","text":"<pre><code>Usage: price-exporter [options]\nExport prices from the commercetools platform.\n\nOptions:\n  --help, -h          Show help text.                                  [boolean]\n  --version           Show version number                              [boolean]\n  --input, -i         Path to CSV template.                           [required]\n  --output, -o        Path to output file.                   [default: \"stdout\"]\n  --apiUrl            The host URL of the HTTP API service.\n                                              [default: \"https://api.europe-west1.gcp.commercetools.com\"]\n  --authUrl           The host URL of the OAuth API service.\n                                             [default: \"https://auth.europe-west1.gcp.commercetools.com\"]\n  --projectKey, -p    API project key.                                [required]\n  --accessToken       CTP client access token. Required scopes: ['view_products', 'view_customers', 'view_types']\n  --delimiter, -d     Used CSV delimiter for template and output. [default: \",\"]\n  --where, -w         Where predicate for products from which to fetch prices.\n  --exportFormat, -f  Format for export.\n                                      [choices: \"csv\", \"json\"] [default: \"json\"]\n  --staged, -s        Specify if prices should be from all or published\n                      products.                                        [boolean]\n  --logLevel          Logging level: error, warn, info or verbose.\n                                                               [default: \"info\"]\n  --logFile           Path to file where to save logs.\n                                                 [default: \"price-exporter.log\"]\n</code></pre>"},{"location":"cli/price-exporter/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--input</code> flag specifies the path to the CSV template file.</li> <li>Only the first line is read and subsequent lines (if present) will be ignored</li> <li>The delimiter must match the delimiter passed in by <code>--delimiter</code> (or the default delimiter)</li> <li>The <code>--output</code> flag specifies where to output/save the exported prices.</li> <li>If the file specified already exists, it will be overwritten.</li> <li>The default location for status report logging is the standard output.</li> <li>If no output path is specified, the exported prices will be logged to the standard output.</li> <li>The <code>--delimiter</code> flag specifies the delimiter used in the input and output file if CSV. Defaults to <code>','</code> if omitted.</li> <li>The <code>where</code> flag specifies an optional (where) query predicate to be included in the request. This predicate is on the products containing the prices (<code>product-proections</code> endpoint) and not on the prices themselves. This predicate should be wrapped in single quotes ('single quoted predicate'). More info on predicates here</li> <li>The <code>--staged</code> flag specifies the projection of the products from which the prices should be fetched.</li> <li>If passed <code>true</code>, prices from published and unpublished products are retrieved</li> <li>If passed <code>false</code> (or omitted), only prices from published products are retrieved</li> </ul>"},{"location":"cli/price-exporter/#csv-headers","title":"CSV headers","text":"<p>To export price in CSV format, the header file is required. This file should contain the desired headers that will be exported. The price-exporter writes data to the CSV file base on the header. This can also be used as a means to filter out undesired data in the CSV file.</p> <p>Example of the content of a header file</p> <pre><code>variant-sku,value.currencyCode,value.centAmount,country,customerGroup.groupName,channel.key,validFrom,validUntil,customType,customField.foo,customField.bar,customField.current,customField.name.nl,customField.name.de,customField.status,customField.price,customField.priceset\n</code></pre> <p>The <code>variant-sku</code> header is required. It contains the <code>sku</code> of the variant where the price belongs to.</p> <p>For custom fields, the <code>customType</code> header is required, it contains the key of the custom type. It is important if you want to parse the csv file via the csv-parser-price module. Also to export any field in the custom object, the format is like this =&gt; <code>customField.[key of field]</code></p> <p>So if you have a price object like below</p> <pre><code>{\n  ...\n  custom: {\n    type: {\n      key: \"my-type\"\n    }\n    fields: {\n      foo: \"bar\",\n      localized: {\n        de: \"Hundefutter\",\n        en: \"dog food\"\n      }\n    }\n  }\n}\n</code></pre> <p>You can export the custom field by passing in a header file like below</p> <pre><code>customType,customField.foo,customField.localized.de,customField.localized.en\n</code></pre> <p>The CSV exported is compatible with the csv-parser-price module, and can be used to import exported prices to the CTP platform.</p>"},{"location":"cli/price-exporter/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly:</p> <pre><code>import PriceExporter from '@commercetools/price-exporter'\nimport fs from 'fs'\n\nconst headers = ['variant-sku', 'value.currencyCode', 'value.centAmount', 'id']\nconst options = {\n    apiConfig: {\n      apiUrl: 'https://api.europe-west1.gcp.commercetools.com'\n      host: 'https://auth.europe-west1.gcp.commercetools.com'\n      project_key: &lt;PROJECT_KEY&gt;,\n      credentials: {\n        clientId: '*********',\n        clientSecret: '*********'\n      }\n    },\n    accessToken: '123456yuhgfdwegh675412wefb3rgb',\n    delimiter: ',',\n    exportFormat: 'csv',\n    staged: true,\n    csvHeaders: headers,\n    predicate: 'productType(id=\"desired-product-type-id\")'\n  }\n}\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  verbose: console.debug,\n}\n\nconst priceExporter = new PriceExporter(options, logger)\n\n// Register error listener\noutputStream.on('error', errorHandler)\n\noutputStream.on('finish', () =&gt; process.stdout.write('done with export'))\n\npriceExporter.run(outputStream)\n</code></pre>"},{"location":"cli/product-exporter/","title":"Product Exporter","text":"<p>A package that helps with exporting commercetools products from the commercetools platform. The products can be exported in JSON format, or as chunks that can be piped to a parser for more export formats.</p>"},{"location":"cli/product-exporter/#configuration","title":"Configuration","text":"<p>The constructor accepts four arguments:</p> <ul> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>exportConfig</code> (Object): Internal Export configurations</li> <li><code>batch</code> (Number): Amount of products to fetch for each API call</li> <li><code>expand</code> (Array): An array of strings signifying reference fields to expand in the returned product</li> <li><code>json</code> (Boolean): Specify if products returned should be in JSON file format. If set to false, the products will be output in chunks (Default: true)</li> <li><code>predicate</code> (String): Query string specifying (where) predicate. More info on predicates here (Optional)</li> <li><code>staged</code> (Boolean): Specify if prices should be fetched from all products (true) or only published products (false) (Optional. Default: false)</li> <li><code>total</code> (Number): The total number of products to fetch</li> <li>An optional logger object having four methods (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>)</li> <li><code>accessToken</code> (String): Access token to be used to authenticate requests to API. Requires scope of [<code>view_products</code>, <code>view_customers</code>]</li> </ul>"},{"location":"cli/product-exporter/#usage","title":"Usage","text":"<p><code>npm install @commercetools/product-exporter --global</code></p>"},{"location":"cli/product-exporter/#cli","title":"CLI","text":"<pre><code>Usage: product-exporter [options]\nExport products from the commercetools platform\n\nOptions:\n  --help, -h        Show help text.                                    [boolean]\n  --version, -v     Show version number                                [boolean]\n  --projectKey, -p  API project key                          [string] [required]\n  --apiUrl          The host URL of the HTTP API service\n                             [string] [default: \"https://api.commercetools.com\"]\n  --authUrl         The host URL of the OAuth API service\n                            [string] [default: \"https://auth.commercetools.com\"]\n  --accessToken     CTP client access token\n                    Required scopes: ['view_products', 'view_customers'][string]\n  --output, -o      Path to output                  [string] [default: \"stdout\"]\n  --batchSize, -b   Amount of products to fetch for each API call (max: 500)\n                                                          [number] [default: 20]\n  --expand, -e      Reference field or fields to expand in the returned products\n                                                                        [array]\n  --exportType, -e  Flag if products should be exported as `JSON` strings or\n                    chunks [string] [choices: \"json\", \"chunk\"] [default: \"json\"]\n  --predicate       `Predicate` specifying characteristics of products to fetch\n                                                                        [string]\n  --staged, -s      Specify if all or published products should be fetched\n                                                                       [boolean]\n  --total, -t       Total number of products to fetch                   [number]\n  --logLevel        Logging level: error, warn, info or debug\n                                                      [string] [default: \"info\"]\n  --prettyLogs      Pretty print logs to the terminal                  [boolean]\n  --logFile         Path to file where logs should be saved\n                                      [string] [default: \"product-exporter.log\"]\n</code></pre>"},{"location":"cli/product-exporter/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--output</code> flag specifies where to output/save the exported products.</li> <li>If the file specified already exists, it will be overwritten.</li> <li>The default location for status report logging is the standard output.</li> <li>If no output path is specified, the exported products will be logged to the standard output.</li> <li>The <code>--predicate</code> flag specifies an optional (where) query predicate to be included in the request. This predicate should be wrapped in single quotes ('single quoted predicate'). More info on predicates here</li> <li>The <code>--expand</code> flag specifies the Reference or References to expand in the returned products. The required references for expansion should be passed in as normal strings separated by a space. More information about reference expansion can be found here</li> <li>The <code>--exportType</code> flag specifies if products returned should be in JSON file format or chunks. The chunk output is particularly useful if a different output format is desired (such as CSV), in which case, the chunks can be piped to a parser to get the desired format.</li> <li>The <code>--staged</code> flag specifies the projection of the products to be fetched.</li> <li>If passed <code>true</code>, published and unpublished products are retrieved</li> <li>If passed <code>false</code> (or omitted), only published products are retrieved</li> </ul>"},{"location":"cli/product-exporter/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly:</p> <pre><code>import ProductExporter from '@commercetools/product-exporter'\nimport fs from 'fs'\n\nconst apiConfig = {\n  host: 'https://auth.commercetools.com',\n  apiUrl: 'https://api.commercetools.com',\n  projectKey: 'node-test-project',\n  credentials: {\n    clientId: '123456hgfds',\n    clientSecret: '123456yuhgfdwegh675412wefb3rgb',\n  },\n}\nconst exportConfig = {\n  batch: 20,\n  expand: ['productType', 'masterVariant.prices[*].customerGroup']\n  json: true,\n  predicate: 'description=\"new stocks\"',\n  staged: true,\n  total: 100,\n}\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  debug: console.debug,\n}\nconst accessToken = 'my-unique-access-token'\n\nconst productExporter = new ProductExporter(\n  apiConfig,\n  exportConfig,\n  logger,\n  accessToken,\n)\n\n// Register error listener\noutputStream.on('error', errorHandler)\n\noutputStream.on('finish', () =&gt; process.stdout.write('done with export'))\n\nproductExporter.run(outputStream)\n</code></pre>"},{"location":"cli/product-exporter/#faq","title":"FAQ","text":"<p>Q: Windows CLI - Product export fails with Malformed parameter: where: Syntax error while parsing 'where'. Invalid input 'd', expected input parameter or primitive value</p> <p>A: Make sure to use proper windows escaping sequences for encoding special characters.</p> <p>On windows cli you can escape special characters by enclosing them with <code>\"\"\"</code>.</p> <p>Example for query predicate</p> <pre><code>--predicate 'productType(id=\"ddddddd-fa0d-433f-b531-da12ddc84911\")' # unescaped\n--predicate 'productType(id=\"\"\"dddddd-fa0d-433f-b531-da12ddc84911\"\"\")' # correctly escaped\n</code></pre>"},{"location":"cli/product-json-to-csv/","title":"Product JSON to CSV Parser","text":"<p>A package that parses commercetools products JSON data to CSV. The products to be parsed can either be read from a <code>.json</code> file or directly piped in from the product exporter.</p>"},{"location":"cli/product-json-to-csv/#usage","title":"Usage","text":"<p><code>npm install @commercetools/product-json-to-csv --global</code></p>"},{"location":"cli/product-json-to-csv/#cli","title":"CLI","text":"<pre><code>Usage: product-json-to-csv [options]\nConvert commercetools products from JSON to CSV\n\nOptions:\n  --help, -h                       Show help                                   [boolean]\n  --version, -v                    Show version number                         [boolean]\n  --projectKey, -p                 API project key                   [string] [required]\n  --apiUrl                         The host URL of the HTTP API service         [string]\n                                              [default: \"https://api.commercetools.com\"]\n  --authUrl                        The host URL of the OAuth API service        [string]\n                                             [default: \"https://auth.commercetools.com\"]\n  --accessToken                    CTP client access token\n                                   Required scopes: ['view_products']           [string]\n  --template, -t                   CSV file containing your header that defines what you\n                                                                          want to export\n  --input, -i                      Path from which to read product chunks.\n                                                                      [default: \"stdin\"]\n  --output, -o                     Path to output           [string] [default: \"stdout\"]\n  --referenceCategoryBy            Define which identifier should be used for the\n                                   categories column. [choices: \"name\", \"key\", \"externalId\",\n                                                          \"namedPath\"] [default: \"name\"]\n  --referenceCategoryOrderHintBy   Define which identifier should be used for the\n                                   categoryOrderHints column. [choices: \"name\", \"key\",\n                                   \"externalId\", \"namedPath\"] [default: \"name\"]\n  --fillAllRows                    Define if product attributes like name should be\n                                   added to each variant row.                  [boolean]\n  --onlyMasterVariants            Export only masterVariants from products.\n                                                      [boolean] [default: false]\n  --language, -l                   Language(s) used for localised attributes such as\n                                   category names. Can contain multiple languages\n                                   delimited by comma \",\"       [string] [default: \"en\"]\n  --delimiter, -d                  Used CSV delimiter.                    [default: \",\"]\n  --multiValueDelimiter, -m        Used CSV delimiter in multiValue fields. [default: \";\"]\n  --encoding, -e                   Encoding used when saving data to output file\n                                                              [string] [default: \"utf8\"]\n  --logLevel                       Logging level: error, warn, info or debug    [string]\n                                                                       [default: \"info\"]\n  --prettyLogs                     Pretty print logs to the terminal           [boolean]\n  --logFile                        Path to file where logs should be saved      [string]\n                                                    [default: \"product-json-to-csv.log\"]\n</code></pre> <p>The products to be parsed from JSON to CSV can be passed to this module in one of two ways:</p> <ul> <li>From a pipe</li> <li>From a file</li> </ul>"},{"location":"cli/product-json-to-csv/#pass-products-through-a-pipe","title":"Pass products through a pipe","text":"<p>Piping products in JSON to be parsed. This ideally works with the commercetools product exporter. In this scenario, the products are parsed directly after export. More information on pipe streams can be found here</p>"},{"location":"cli/product-json-to-csv/#example","title":"Example","text":"<pre><code>$ @commercetools/product-exporter --projectKey &lt;project_key&gt; | @commercetools/product-json-to-csv \\\n--projectKey &lt;project_key&gt; --template &lt;path_to_template_file&gt; --output &lt;path_to_output_file&gt;\n</code></pre>"},{"location":"cli/product-json-to-csv/#pass-products-from-a-file","title":"Pass products from a file","text":"<p>This module also accepts products to be read from a JSON file. This can be done by specifying the <code>--input</code> flag</p>"},{"location":"cli/product-json-to-csv/#example_1","title":"Example","text":"<pre><code>$ @commercetools@commercetools/product-json-to-csv --language \"en,de,fr\" --projectKey &lt;project_key&gt; --input &lt;path_to_JSON_file&gt; --template &lt;path_to_template_file&gt; --output &lt;path_to_output_file&gt;\n</code></pre>"},{"location":"cli/product-json-to-csv/#csv-parser-template","title":"CSV Parser Template","text":"<p>A parser template defines the content of the resulting parsed CSV file, by listing wanted product attribute names as header row. The header column values will be parsed and the resulting CSV file will contain corresponding attribute values of the exported products.</p> <pre><code># only productType.name, the variant id and localized name (english) will be exported\nproductType,name.en,variantId\n</code></pre> <p>For more information about the template, and how to generate a template for products, see here</p>"},{"location":"cli/product-json-to-csv/#parse-without-csv-template","title":"Parse without CSV template","text":"<p>Products can however be parsed to CSV without the need to provide a template. In this situation, a zip archive should be passed to the <code>--output</code> flag. If no template file is passed in, one CSV file will be created for each product type.</p>"},{"location":"cli/product-json-to-csv/#example_2","title":"Example","text":"<pre><code>$ @commercetools/product-json-to-csv --projectKey &lt;project_key&gt; --input &lt;path_to_JSON_file&gt; --output &lt;path_to_zip_archive&gt;.zip\n</code></pre>"},{"location":"cli/product-json-to-csv/#support-for-different-encodings","title":"Support for different encodings","text":"<p>Parser can save products in a different encoding (than the default <code>utf8</code>) using <code>--encoding \"encodingName\"</code> parameter. Supported encodings are listed here in the <code>iconv-lite</code> module github page.</p>"},{"location":"cli/product-json-to-csv/#example_3","title":"Example","text":"<pre><code>$ @commercetools/product-json-to-csv --projectKey &lt;project_key&gt; --input &lt;path_to_JSON_file&gt; --output &lt;path_to_zip_archive&gt;.zip --encoding win1252\n</code></pre>"},{"location":"cli/product-json-to-csv/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly</p>"},{"location":"cli/product-json-to-csv/#configuration","title":"Configuration","text":"<p>The constructor accepts four arguments:</p> <ul> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>parserConfig</code> (Object): Internal Parse configurations</li> <li><code>categoryBy</code> (String): Specify which identifier should be used to reference the categories (Options: <code>name</code>, <code>key</code>, <code>externalId</code> and <code>namedPath</code>. Default: <code>name</code>)</li> <li><code>categoryOrderHintBy</code> (String): Specify which identifier should be used to reference the categoryOrderHints (Options: <code>name</code>, <code>key</code>, <code>externalId</code> and <code>namedPath</code>. Default: <code>name</code>)</li> <li><code>delimiter</code> (String): Delimiter used to separate cells in the output file (Default: <code>;</code>)</li> <li><code>fillAllRows</code> (Boolean): Specify if product attributes like name should be added to each variant row (Default: <code>false</code>)</li> <li><code>headerFields</code> (Array): An array of header fields to be passed to CSV. This headerFields array should contain the required columns of the CSV file(Optional. If omitted, a <code>.zip</code> file containing one csv file per product type will be created. This is synonymous with the <code>--template</code> flag in the CLI) <li><code>language</code> (String): Default language used when resolving localised attributes (except lenums) and category names (Default: <code>en</code>)</li> <li><code>languages</code> (Array): List of languages which should be exported from <code>ltext/lenum</code> attributes (Default: <code>[\"en\"]</code>) <li><code>encoding</code> (String): Encoding used when saving products to output stream (Default: <code>utf8</code>)</li> <li><code>multiValueDelimiter</code> (String): Delimiter used to separate multivalue items in cells in the output file (Default: <code>;</code>)</li> <li>An optional logger object having four methods (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>)</li> <li><code>accessToken</code> (String): Access token to be used to authenticate requests to API. Requires scope of [<code>view_products</code>, <code>view_customers</code>]</li>"},{"location":"cli/product-json-to-csv/#example_4","title":"Example","text":"<pre><code>import ProductJsonToCsv from '@commercetools/product-json-to-csv'\nimport fs from 'fs'\n\nconst inputStream = fs.createWriteStream('path_to_JSON_file')\nconst outputStream = fs.createWriteStream('path_to_CSV_file') // &lt;- or zip file if no headers\n\nconst apiConfig = {\n  host: 'https://auth.commercetools.com',\n  apiUrl: 'https://api.commercetools.com',\n  projectKey: 'node-test-project',\n  credentials: {\n    clientId: '123456hgfds',\n    clientSecret: '123456yuhgfdwegh675412wefb3rgb',\n  },\n}\n\nconst headerFields = ['name.en', 'key', 'sku']\n\nconst parserConfig = {\n  headerFields,\n  categoryBy: 'namedPath',\n  categoryOrderHintBy: key,\n  delimiter: ',',\n  fillAllRows: true,\n  language: 'en',\n  languages: ['en', 'de'],\n  multiValueDelimiter: ';',\n}\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  debug: console.debug,\n}\nconst accessToken = 'my-unique-access-token'\n\nconst parser = new ProductJsonToCsv(\n  apiConfig,\n  exportConfig,\n  logger,\n  accessToken\n)\n\n// Register error listener\noutputStream.on('error', errorHandler)\n\noutputStream.on('finish', () =&gt; process.stdout.write('Parsing completed'))\n\nparser.run(inputStream, outputStream)\n</code></pre>"},{"location":"cli/product-json-to-xlsx/","title":"Product JSON to XLSX Parser","text":"<p>A package that parses commercetools products JSON data to XLSX. The products to be parsed can either be read from a <code>.json</code> file or directly piped in from the product exporter.</p>"},{"location":"cli/product-json-to-xlsx/#usage","title":"Usage","text":"<p><code>npm install @commercetools/product-json-to-xlsx --global</code></p>"},{"location":"cli/product-json-to-xlsx/#cli","title":"CLI","text":"<pre><code>Usage: product-json-to-xlsx [options]\nConvert commercetools products from JSON to XLSX\n\nOptions:\n  --help, -h                       Show help                                   [boolean]\n  --version, -v                    Show version number                         [boolean]\n  --projectKey, -p                 API project key                   [string] [required]\n  --apiUrl                         The host URL of the HTTP API service         [string]\n                                              [default: \"https://api.commercetools.com\"]\n  --authUrl                        The host URL of the OAuth API service        [string]\n                                             [default: \"https://auth.commercetools.com\"]\n  --accessToken                    CTP client access token\n                                   Required scopes: ['view_products']           [string]\n  --template, -t                   CSV file containing your header that defines what you\n                                                                          want to export\n  --input, -i                      Path from which to read product chunks.\n                                                                      [default: \"stdin\"]\n  --output, -o                     Path to output           [string] [default: \"stdout\"]\n  --referenceCategoryBy            Define which identifier should be used for the\n                                   categories column. [choices: \"name\", \"key\", \"externalId\",\n                                                          \"namedPath\"] [default: \"name\"]\n  --referenceCategoryOrderHintBy   Define which identifier should be used for the\n                                   categoryOrderHints column. [choices: \"name\", \"key\",\n                                   \"externalId\", \"namedPath\"] [default: \"name\"]\n  --fillAllRows                    Define if product attributes like name should be\n                                   added to each variant row.                  [boolean]\n  --onlyMasterVariants            Export only masterVariants from products.\n                                                      [boolean] [default: false]\n  --language, -l                   Language(s) used for localised attributes such as\n                                   category names. Can contain multiple languages\n                                   delimited by comma \",\"       [string] [default: \"en\"]\n  --delimiter, -d                  Used template CSV delimiter.           [default: \",\"]\n  --multiValueDelimiter, -m        Used CSV delimiter in multiValue fields. [default: \";\"]\n  --logLevel                       Logging level: error, warn, info or debug    [string]\n                                                                       [default: \"info\"]\n  --prettyLogs                     Pretty print logs to the terminal           [boolean]\n  --logFile                        Path to file where logs should be saved      [string]\n                                                    [default: \"product-json-to-xlsx.log\"]\n</code></pre> <p>The products to be parsed from JSON to XLSX can be passed to this module in one of two ways:</p> <ul> <li>From a pipe</li> <li>From a file</li> </ul>"},{"location":"cli/product-json-to-xlsx/#pass-products-through-a-pipe","title":"Pass products through a pipe","text":"<p>Piping products in JSON to be parsed. This ideally works with the commercetools product exporter. In this scenario, the products are parsed directly after export. More information on pipe streams can be found here</p>"},{"location":"cli/product-json-to-xlsx/#example","title":"Example","text":"<pre><code>$ @commercetools/product-exporter --projectKey &lt;project_key&gt; | @commercetools/product-json-to-xlsx \\\n--projectKey &lt;project_key&gt; --template &lt;path_to_template_file&gt; --output &lt;path_to_output_file&gt;\n</code></pre>"},{"location":"cli/product-json-to-xlsx/#pass-products-from-a-file","title":"Pass products from a file","text":"<p>This module also accepts products to be read from a JSON file. This can be done by specifying the <code>--input</code> flag</p>"},{"location":"cli/product-json-to-xlsx/#example_1","title":"Example","text":"<pre><code>$ @commercetools@commercetools/product-json-to-xlsx --language \"en,de,fr\" --projectKey &lt;project_key&gt; --input &lt;path_to_JSON_file&gt; --template &lt;path_to_template_file&gt; --output &lt;path_to_output_file&gt;\n</code></pre>"},{"location":"cli/product-json-to-xlsx/#csv-parser-template","title":"CSV Parser Template","text":"<p>A parser template defines the content of the resulting parsed XLSX file, by listing wanted product attribute names as header row. The header column values will be parsed and the resulting XLSX file will contain corresponding attribute values of the exported products.</p> <pre><code># only productType.name, the variant id and localized name (english) will be exported\nproductType,name.en,variantId\n</code></pre> <p>For more information about the template, and how to generate a template for products, see here</p>"},{"location":"cli/product-json-to-xlsx/#parse-without-csv-template","title":"Parse without CSV template","text":"<p>Products can however be parsed to XLSX without the need to provide a template. In this situation, a zip archive should be passed to the <code>--output</code> flag. If no template file is passed in, one XLSX file will be created for each product type.</p>"},{"location":"cli/product-json-to-xlsx/#example_2","title":"Example","text":"<pre><code>$ @commercetools@commercetools/product-json-to-xlsx --projectKey &lt;project_key&gt; --input &lt;path_to_JSON_file&gt; --output &lt;path_to_zip_archive&gt;.zip\n</code></pre>"},{"location":"cli/product-json-to-xlsx/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly</p>"},{"location":"cli/product-json-to-xlsx/#configuration","title":"Configuration","text":"<p>The constructor accepts four arguments:</p> <ul> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>parserConfig</code> (Object): Internal Parse configurations</li> <li><code>categoryBy</code> (String): Specify which identifier should be used to reference the categories (Options: <code>name</code>, <code>key</code>, <code>externalId</code> and <code>namedPath</code>. Default: <code>name</code>)</li> <li><code>categoryOrderHintBy</code> (String): Specify which identifier should be used to reference the categoryOrderHints (Options: <code>name</code>, <code>key</code>, <code>externalId</code> and <code>namedPath</code>. Default: <code>name</code>)</li> <li><code>fillAllRows</code> (Boolean): Specify if product attributes like name should be added to each variant row (Default: <code>false</code>)</li> <li><code>headerFields</code> (Array): An array of header fields to be passed to XLSX. This headerFields array should contain the required columns of the XLSX file (Optional. If omitted, a <code>.zip</code> file containing one XLSX file per product type will be created. This is synonymous with the <code>--template</code> flag in the CLI) <li><code>language</code> (String): Default language used when resolving localised attributes (except lenums) and category names (Default: <code>en</code>)</li> <li><code>languages</code> (Array): List of languages which should be exported from <code>ltext/lenum</code> attributes (Default: <code>[\"en\"]</code>) <li><code>multiValueDelimiter</code> (String): Delimiter used to separate multivalue items in cells in the output file (Default: <code>;</code>)</li> <li>An optional logger object having four methods (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>)</li> <li><code>accessToken</code> (String): Access token to be used to authenticate requests to API. Requires scope of [<code>view_products</code>, <code>view_customers</code>]</li>"},{"location":"cli/product-json-to-xlsx/#example_3","title":"Example","text":"<pre><code>import ProductJsonToXlsx from '@commercetools/product-json-to-xlsx'\nimport fs from 'fs'\n\nconst inputStream = fs.createWriteStream('path_to_JSON_file')\nconst outputStream = fs.createWriteStream('path_to_XLSX_file') // &lt;- or zip file if no headers\n\nconst apiConfig = {\n  host: 'https://auth.commercetools.com',\n  apiUrl: 'https://api.commercetools.com',\n  projectKey: 'node-test-project',\n  credentials: {\n    clientId: '123456hgfds',\n    clientSecret: '123456yuhgfdwegh675412wefb3rgb',\n  },\n}\n\nconst headerFields = ['name.en', 'key', 'sku']\n\nconst parserConfig = {\n  headerFields,\n  categoryBy: 'namedPath',\n  categoryOrderHintBy: key,\n  fillAllRows: true,\n  language: 'en',\n  languages: ['en', 'de'],\n  multiValueDelimiter: ';',\n}\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  debug: console.debug,\n}\nconst accessToken = 'my-unique-access-token'\n\nconst parser = new ProductJsonToXlsx(\n  apiConfig,\n  exportConfig,\n  logger,\n  accessToken\n)\n\n// Register error listener\noutputStream.on('error', errorHandler)\n\noutputStream.on('finish', () =&gt; process.stdout.write('Parsing completed'))\n\nparser.run(inputStream, outputStream)\n</code></pre>"},{"location":"cli/resource-deleter/","title":"Resource Deleter","text":"<p>A package which deletes resources from the commercetools platform.</p> <p>Examples of the resources are :</p> <ul> <li>carts</li> <li>categories</li> <li>channels</li> <li>customergroups</li> <li>customers</li> <li>customobjects</li> <li>discountcodes</li> <li>inventoryentries</li> <li>orders</li> <li>payments</li> <li>productdiscounts</li> <li>products</li> <li>producttypes</li> <li>reviews</li> <li>shippingmethods</li> <li>states</li> <li>taxcategories</li> <li>types</li> <li>zones</li> </ul>"},{"location":"cli/resource-deleter/#configuration","title":"Configuration","text":"<p>The constructor accepts two arguments:</p> <ul> <li>A required object containing the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here).</li> <li><code>accessToken</code> (String): [Access token] to be used to authenticate requests to API. Requires scope of [<code>manage_products</code>, <code>manage_customers</code>, <code>manage_types</code>]. More info on how to get the access token here.</li> <li><code>resource</code> (String): [resource] that need to be deleted.</li> <li><code>predicate</code> (String): Query string specifying (where) predicate. More info on predicates here (Optional).</li> <li>An optional logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>debug</code>).</li> </ul>"},{"location":"cli/resource-deleter/#usage","title":"Usage","text":"<p><code>npm install @commercetools/resource-deleter --global</code></p>"},{"location":"cli/resource-deleter/#cli","title":"CLI","text":"<pre><code>Usage: resource-deleter [options]\nDelete resource from the commercetools platform.\n\nOptions:\n  --help                     Show help text.                           [boolean]\n  --version                  Show version number.                       [boolean]\n  --output, -o               Path to output file.            [default: \"stdout\"]\n  --apiUrl                   The host URL of the HTTP API service.\n                                              [default: \"https://api.europe-west1.gcp.commercetools.com\"]\n  --authUrl                  The host URL of the OAuth API service.\n                                             [default: \"https://auth.europe-west1.gcp.commercetools.com\"]\n  --accessToken              CTP client access token.\n                             Required scopes: ['manage_products', 'manage_customers', 'manage_types'][string]\n  --projectKey, -p           API project key.                         [required]\n\n  --resource, -r             Resource that need to be deleted.        [required]\n  --confirm, -c              Confirm the resource to delete.          [boolean]\n                                                               [default: \"false\"]\n  --where, -w                specify where predicate.\n  --logLevel                 Logging level: error, warn, info or debug.\n                                                               [default: \"info\"]\n  --prettyLogs               Pretty print logs to the terminal.         [boolean]\n  --logFile                  Path to file where to save logs file.\n                                              [default: \"resource-deleter.log\"]\n</code></pre> <p>Then you can delete resource using the cli:</p> <pre><code>- Without predicate\n  resource-deleter -p my-project-key -r my-resource\n\n- With predicate\n  resource-deleter -p my-project-key -r my-resource -w my-desired-key\n</code></pre>"},{"location":"cli/resource-deleter/#info-on-flags","title":"Info on flags","text":"<ul> <li>The <code>--output</code> flag specifies where to output the deleted resource. Several notes on this flag:</li> <li>The default location for status report logging is the standard output.</li> <li>If no output path is specified, the deleted resource output will be logged to the standard output as a result, status reports will be logged to a <code>resource-deleter.log</code> file in the current directory.</li> <li>The <code>where</code> flag specifies an optional (where) query predicate to be included in the request. This predicate should be wrapped in single quotes ('single quoted predicate'). More info on predicates here.</li> </ul>"},{"location":"cli/resource-deleter/#js","title":"JS","text":"<p>For more direct usage, it is possible to use this module directly:</p> <pre><code>import resourceDeleter from '@commercetools/resource-deleter'\n\nconst options = {\n  apiConfig: {\n    apiUrl: 'https://api.europe-west1.gcp.commercetools.com',\n    host: 'https://auth.europe-west1.gcp.commercetools.com',\n    project_key: 'my-project-key',\n    credentials: {\n      clientId: '*********',\n      clientSecret: '*********',\n    },\n  },\n  accessToken: '123456yuhgfdwegh675412wefb4rgb',\n  resource: 'my-resource',\n  predicate: 'key=\"my-desired-key\"',\n  logger: {\n    error: console.error,\n    warn: console.warn,\n    info: console.log,\n    debug: console.debug,\n  },\n}\n\nconst resourceDeleter = new ResourceDeleter(options)\n\nresourceDeleter\n  .run()\n  .then(() =&gt; {\n    console.log('resource deleted')\n  })\n  .catch((error) =&gt; {\n    // handle error\n  })\n</code></pre>"},{"location":"cli/state-importer/","title":"State Importer","text":"<p>A package that helps with importing commercetools states in JSON format to the commercetools platform. This package is built to be used in conjunction with sphere-node-cli</p>"},{"location":"cli/state-importer/#configuration","title":"Configuration","text":"<p>The constructor accepts three arguments:</p> <ul> <li>A required object containing the following values:</li> <li><code>apiConfig</code> (Object): <code>AuthMiddleware</code> options for authentication on the commercetools platform. (Required. See here)</li> <li><code>continueOnProblems</code> (Boolean): Flag whether to continue processing if an error occurs (Optional. Default: false)</li> <li><code>accessToken</code> (String): Access token to be used to authenticate requests to API. Requires scope of [<code>manage_project</code>] to create and/or update states or [<code>manage_orders</code>] to update states</li> <li>An optional logger object having four functions (<code>info</code>, <code>warn</code>, <code>error</code> and <code>verbose</code>)</li> </ul>"},{"location":"cli/state-importer/#usage-with-sphere-node-cli","title":"Usage with <code>sphere-node-cli</code>","text":"<p>You can use this package from the <code>sphere-node-cli</code>. In order for the cli to import states, the file to import from must be a valid JSON and follow this structure:</p> <pre><code>[\n  {\n    \"key\": \"foobar\",\n    \"type\": \"ReviewState\",\n    \"name\": {\n      \"en\": \"chancellor\"\n    },\n    \"description\": {\n      \"en\": \"Some state used for reviews\"\n    },\n    \"initial\": false\n  },\n  {\n    \"key\": \"Wubalubadubdub\",\n    \"type\": \"LineItemState\",\n    \"name\": {\n      \"en\": \"science\"\n    },\n    \"initial\": true\n  },\n  {\n    \"key\": \"Meeseeks\",\n    \"type\": \"LineItemState\",\n    \"name\": {\n      \"en\": \"can do!\"\n    },\n    \"initial\": true\n  },\n  {\n    \"key\": \"new-product-state\",\n    \"type\": \"ProductState\",\n    \"name\": {\n      \"en\": \"new-sample-product-state\",\n      \"de\": \"neue-beispiele-product-state\"\n    },\n    \"description\": {\n      \"en\": \"john and jane doe\",\n      \"de\": \"Denkt euch daran\"\n    },\n    \"initial\": true\n  },\n  ...\n]\n</code></pre> <p>Then you can import this file using the cli:</p> <pre><code>sphere import -t state -p my-project-key --host 'https://api.europe-west1.gcp.commercetools.com' --authHost 'https://auth.europe-west1.gcp.commercetools.com' -f /path/to/file.json -c\n '{\"continueOnProblems\": true}'\n</code></pre>"},{"location":"cli/state-importer/#direct-usage","title":"Direct Usage","text":"<p>If you would like to have more control, you can also use this module directly in Javascript. To do this, you need to install it:</p> <pre><code>npm install @commercetools/state-importer\n</code></pre> <p>Then you can use it to import states:</p> <pre><code>import StateImport from '@commercetools/state-importer'\n\nconst states = [\n  {\n    key: 'foobar',\n    type: 'ReviewState',\n    name: {\n      en: 'chancellor'\n    },\n    description: {\n      en: 'Some state used for reviews'\n    },\n    initial: false\n  },\n  {\n    key: 'Wubalubadubdub',\n    type: 'LineItemState',\n    name:{\n      en: 'science'\n    },\n    initial: true\n  },\n  {\n    key: 'Meeseeks',\n    type: 'LineItemState',\n    name: {\n      en: 'can do!'\n    },\n    initial: true\n  },\n  {\n    key: 'new-product-state',\n    type: 'ProductState',\n    name: {\n      en: 'new-sample-product-state',\n      de: 'neue-beispiele-product-state'\n    },\n    description: {\n      en: 'john and jane doe',\n      de: 'Denkt euch daran'\n    },\n    initial: true\n  },\n  ...\n]\n\nconst options = {\n    apiConfig: {\n      host: 'https://auth.commercetools.com'\n      projectKey: &lt;PROJECT_KEY&gt;,\n      credentials: {\n        clientId: '*********',\n        clientSecret: '*********'\n      }\n    },\n    accessToken: '123456yuhgfdwegh675412wefb3rgb',\n    continueOnProblems: false\n  }\n}\n\nconst logger = {\n  error: console.error,\n  warn: console.warn,\n  info: console.log,\n  debug: console.debug,\n}\n\nconst stateImport = new StateImport(options, logger)\n\nstateImport.run(states)\n  .then(() =&gt; {\n    stateImport.summaryReport()\n    // handle successful import\n  })\n  .catch((error) =&gt; {\n    // handle error\n  })\n</code></pre> <p>On successful completion, a call to the <code>.summaryReport()</code> method returns a report in the following format:</p> <pre><code>{\n  reportMessage: 'Summary: there were 5 successfully states (3 were newly created, 2 were updated and 0 were unchanged).',\n  detailedSummary: {\n    created: 3,\n    updated: 2,\n    unchanged: 0,\n    errors: {\n      create: []\n      update: []\n    }\n  }\n}\n</code></pre> <p>Note: By default, if a state exists, the module tries to build update actions for it, and if no update actions can be built, the states will be ignored</p>"},{"location":"sdk/","title":"SDK","text":"<p>This section contains all information about the sdk-related packages.</p> <p>If you are looking to migrate from the <code>sphere-node-sdk</code> package, please read the migration guide.</p>"},{"location":"sdk/#design-architecture","title":"Design architecture","text":"<p>The SDK is now split into multiple little packages, think about it as a microservice architecture. This is by choice and it provides several different advantages:</p> <ul> <li>flexibility: choose the packages that fits best your use case</li> <li>extensibility: developers can potentially build their own packages to extend / replace pieces of the SDK packages (e.g. custom middlewares)</li> <li>maintainability: easier to maintain each single little package instead of one big library. This is also one of the reasons to use a monorepo</li> </ul> <p>The core of the SDK lies within its middlewares implementation. Middlewares do specific things and can be replaced by other middlewares depending on the use case, allowing many possible combinations.</p> <p>The SDK client itself is in fact really simple and somehow even agnostic of the specific commercetools platform API that can be used as a generic HTTP client.</p> <p>If we take a step back and look at the general requirement, at the end we simply want to execute a request. It just happens to be that we want to make specific requests to the commercetools platform API but it might be as well any other API. That's where the middlewares come in, which provide the side effects of the given request.</p>"},{"location":"sdk/#usage-example","title":"Usage example","text":"<p>In this example (integration test) we are going to make some requests to the <code>/channels</code> API endpoint. For that we need to be able to make actual requests (<code>http</code> middleware) as well as to authenticate the requests using the API Client Credentials Flow (<code>auth</code> middleware).</p> <p>The <code>queue</code> middleware is not really necessary in this simple example but it is usually useful to limit a bit the number of concurrent requests and should be place before the <code>http</code> middleware.</p> <p>The <code>api-request-builder</code> package comes in handy to easily construct the request URI but it is not really necessary as the URI could be also typed manually.</p> <pre><code>import { createRequestBuilder } from '@commercetools/api-request-builder'\nimport { createClient } from '@commercetools/sdk-client'\nimport { createAuthMiddlewareForClientCredentialsFlow } from '@commercetools/sdk-middleware-auth'\nimport { createHttpMiddleware } from '@commercetools/sdk-middleware-http'\nimport { createQueueMiddleware } from '@commercetools/sdk-middleware-queue'\nimport omit from 'lodash.omit'\n\nconst ignoredResponseKeys = ['id', 'createdAt', 'lastModifiedAt']\n\nconst service = createRequestBuilder({ projectKey }).channels\n\nconst authMiddleware = createAuthMiddlewareForClientCredentialsFlow({\n  host: 'https://auth.commercetools.com',\n  projectKey: 'test',\n  credentials: {\n    clientId: '123',\n    clientSecret: 'secret',\n  },\n})\nconst httpMiddleware = createHttpMiddleware({\n  host: 'https://api.commercetools.com',\n})\nconst queueMiddleware = createQueueMiddleware({\n  concurrency: 5,\n})\nconst client = createClient({\n  middlewares: [authMiddleware, queueMiddleware, httpMiddleware],\n})\n\ndescribe('Channels', () =&gt; {\n  const key = uniqueId('channel_')\n  let channelResponse\n\n  it('create', () =&gt; {\n    const body = {\n      key,\n      name: { en: key },\n    }\n    const createRequest = {\n      uri: service.build(),\n      method: 'POST',\n      body,\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }\n\n    return client.execute(createRequest).then((response) =&gt; {\n      channelResponse = response.body\n      expect(omit(response.body, ignoredResponseKeys)).toEqual({\n        ...body,\n        roles: ['InventorySupply'],\n        version: 1,\n      })\n      expect(response.statusCode).toBe(201)\n    })\n  })\n\n  it('fetch', () =&gt; {\n    const fetchRequest = {\n      uri: service.where(`key = \"${key}\"`).build(),\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }\n\n    return client.execute(fetchRequest).then((response) =&gt; {\n      expect(response.body.results).toHaveLength(1)\n      expect(response.statusCode).toBe(200)\n    })\n  })\n\n  it('update', () =&gt; {\n    const updateRequest = {\n      uri: service.byId(channelResponse.id).build(),\n      method: 'POST',\n      body: {\n        version: channelResponse.version,\n        actions: [{ action: 'addRoles', roles: ['OrderImport'] }],\n      },\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }\n\n    return client.execute(updateRequest).then((response) =&gt; {\n      channelResponse = response.body\n      expect(omit(response.body, ignoredResponseKeys)).toEqual({\n        key,\n        name: { en: key },\n        roles: ['InventorySupply', 'OrderImport'],\n        version: 2,\n      })\n      expect(response.statusCode).toBe(200)\n    })\n  })\n\n  it('delete', () =&gt; {\n    const uri = service\n      .byId(channelResponse.id)\n      .withVersion(channelResponse.version)\n      .build()\n\n    const deleteRequest = {\n      uri,\n      method: 'DELETE',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }\n\n    return client.execute(deleteRequest).then((response) =&gt; {\n      expect(response.statusCode).toBe(200)\n    })\n  })\n})\n\nlet uniqueIdCounter = 0\nfunction uniqueId(prefix) {\n  const id = `${Date.now()}_${uniqueIdCounter}`\n  uniqueIdCounter += 1\n  return prefix ? prefix + id : id\n}\n</code></pre>"},{"location":"sdk/Glossary/","title":"Glossary","text":"<p>This is a glossary of the core terms around SDK packages, along with their type signatures. The types are documented using Flow notation.</p>"},{"location":"sdk/Glossary/#clientrequest","title":"ClientRequest","text":"<pre><code>type ClientRequest = {\n  uri: string,\n  method: MethodType,\n  body?: string | Object,\n  headers?: {\n    [key: string]: string,\n  },\n}\n</code></pre> <p>A ClientRequest is an object describing the request that needs to be executed by the <code>sdk-client</code>. This is also the signature of the request object passed to a middleware.</p>"},{"location":"sdk/Glossary/#clientresponse","title":"ClientResponse","text":"<pre><code>type ClientResponse = {\n  body?: Object,\n  error?: HttpErrorType,\n  statusCode: number,\n}\n</code></pre> <p>A ClientResponse is an object describing the response object passed to a middleware.</p>"},{"location":"sdk/Glossary/#middleware","title":"Middleware","text":"<pre><code>type MiddlewareRequest = ClientRequest\ntype MiddlewareResponse = {\n  resolve(): void,\n  reject(): void,\n  body?: Object,\n  error?: HttpErrorType,\n  statusCode: number,\n}\n\ntype Dispatch = (\n  request: MiddlewareRequest,\n  response: MiddlewareResponse\n) =&gt; any\ntype Middleware = (next: Dispatch) =&gt; Dispatch\n</code></pre> <p>A Middleware is a higher-order function that composes a dispatch function to return a new dispatch function.</p> <p>Middleware is composable using function composition. It is used for authentication, making http requests, logging requests, etc. See section about middlewares for more information.</p>"},{"location":"sdk/Glossary/#client","title":"Client","text":"<pre><code>type Client = {\n  execute: (request: ClientRequest) =&gt; Promise&lt;ClientResult&gt;,\n}\n</code></pre> <p>A Client is an object that contains functions to work with HTTP requests.</p> <ul> <li><code>execute(request)</code> is the main function to use for doing HTTP requests, using the provided middlewares.</li> </ul>"},{"location":"sdk/Glossary/#clientresult","title":"ClientResult","text":"<pre><code>type ClientResult =\n  | {\n      body: ?Object,\n      statusCode: number,\n    }\n  | HttpErrorType\n</code></pre> <p>A ClientResult is the object returned by <code>execute</code>, depending if the response was resolved or rejected.</p>"},{"location":"sdk/Glossary/#httperrortype","title":"HttpErrorType","text":"<pre><code>type HttpErrorType = {\n  name: string,\n  message: string,\n  code: number,\n  status: number,\n  statusCode: number,\n  body: Object,\n  originalRequest: ClientRequest,\n  headers?: {\n    [key: string]: string,\n  },\n}\n</code></pre> <p>A HttpErrorType describes the shape of the <code>error</code> rejected by <code>execute</code>. The <code>error</code> is typed (e.g. <code>BadRequest</code>, <code>Unauthorized</code>) and contains useful meta information to help debug the cause of the error.</p>"},{"location":"sdk/Glossary/#syncaction","title":"SyncAction","text":"<pre><code>type UpdateAction = {\n  action: string,\n  [key: string]: any,\n}\ntype SyncAction = {\n  buildActions: (now: Object, before: Object) =&gt; Array&lt;UpdateAction&gt;,\n}\n\ntype ActionGroup = {\n  type: string,\n  group: 'ignore' | 'allow',\n}\n</code></pre>"},{"location":"sdk/Middlewares/","title":"Middlewares","text":"<p>If you've used libraries like Express and Koa, or Redux, you were also probably already familiar with the concept of middleware. In these frameworks, a middleware is some code you can put between the framework receiving a request, and the framework generating a response. For example, Express or Koa middleware may add CORS headers, logging, compression, and more. The best feature of middleware is that it's composable in a chain. You can use multiple independent third-party middlewares in a single project.</p> <p>The SDK middlewares work similarly to those concepts. Given an initial <code>request</code> and <code>response</code> definition, each middleware can do \"side effects\" and \"transform\" those objects, passing them to the next middleware in the chain. This provides a third-party extension point for handling HTTP requests. For example, there are middlewares for doing authentication, for logging, for actually making the HTTP request, for retrying failed requests, etc.</p> <p>The most important thing is the contract the middlewares have between each other: the <code>request</code> and <code>response</code> objects passed to each middleware have a well predefined shape, known to each middleware. This is important to ensure that middlewares can do side effects on those objects.</p>"},{"location":"sdk/Middlewares/#middlewares-api","title":"Middlewares API","text":"<p>A Middleware is a higher-order function that composes a dispatch function to return a new dispatch function.</p> <pre><code>const middleware = (next) =&gt; (request, response) =&gt; next(request, response)\n</code></pre> <p>The dispatch function accepts 2 arguments: <code>request</code> and <code>response</code> objects. After doing the side effects, the middleware should call <code>next</code>, passing the (mutated) <code>request</code> and <code>response</code> to the next middleware.</p>"},{"location":"sdk/Middlewares/#implement-a-logging-middleware","title":"Implement a logging middleware","text":"<p>Let's see a simple practical example: a middleware that logs the incoming <code>request</code> and <code>response</code> objects.</p> <pre><code>const loggerMiddleware = (next) =&gt; (request, response) =&gt; {\n  const { statusCode, body, error } = response\n  console.log('Request:', request)\n  console.log('Response:', { statusCode, body, error })\n  next(request, response)\n}\n</code></pre> <p>See official middlewares for more advanced examples.</p>"},{"location":"sdk/Testing/","title":"Testing","text":"<p>If you are testing a library or a project that uses the SDK underneath, you probably don't want to make actual HTTP requests (unless you are doing integration tests).</p>"},{"location":"sdk/Testing/#mock-requests-with-nock-recommended","title":"Mock requests with <code>nock</code> (recommended)","text":"<p>There are several approaches to mock the requests, the easiest one we recommend to use is the <code>nock</code> library. This library allows to deeply customize how you want to mock the actual node <code>http.request</code> and it's very declarative, making it easy to use. Let's see an example:</p> <pre><code>// We'll mock a request to fetch some products\nnock('https://api.commercetools.com')\n  .defaultReplyHeaders({ 'Content-Type': 'application/json' })\n  .get('/my-project/products')\n  .reply(200, {\n    total: 2,\n    count: 2,\n    results: [{ id: '1' }, { id: '2' }],\n  })\n\n// or mock a request to create a channel\nnock('https://api.commercetools.com')\n  .defaultReplyHeaders({ 'Content-Type': 'application/json' })\n  .filteringRequestBody(() =&gt; '*')\n  .post('/my-project/channels', '*')\n  .reply(201, { id: '1' })\n\n  // we could also do assertions on the body payload\n  .filteringRequestBody((body) =&gt; {\n    expect(body).toBe(JSON.stringify({ foo: 'bar' }))\n    return '*'\n  })\n\n// Note that by default the defined mocks (or interceptors) are used only once\n// https://github.com/node-nock/nock#read-this---about-interceptors\n// To re-use the same interceptor for multiple requests simply call `persist()`\n// https://github.com/node-nock/nock#persist\n</code></pre>"},{"location":"sdk/Testing/#mock-middlewares","title":"Mock middlewares","text":"<p>Another approach would be to provide a <code>http-mock</code> middleware that replaces the e.g. <code>http</code> middleware. It's a bit more work in terms of configuring the middleware for mocking different requests but it might be simpler for mocking requests in general and not caring about the response.</p> <pre><code>import { getErrorByCode } from '@commercetools/sdk-middleware-http'\nconst BadRequest = getErrorByCode(400)\nconst httpMockSuccessMiddleware = (next) =&gt; (request, response) =&gt; {\n  next(request, { ...response, body: { foo: 'bar' } })\n}\nconst httpMockFailureMiddleware = (next) =&gt; (request, response) =&gt; {\n  next(request, { ...response, error: new BadRequest('Invalid field') })\n}\nconst client = createClient({\n  middlewares: [\n    authMiddleware,\n    httpMockSuccessMiddleware,\n    // httpMockFailureMiddleware,\n  ],\n})\n</code></pre>"},{"location":"sdk/Testing/#mock-modules","title":"Mock modules","text":"<p>Furthermore, if you're using <code>jest</code> for testing, you might decide to define manual mocks for the SDK modules. You might think of using this if you just want to mock the SDK modules altogether.</p> <pre><code>// Note: once this PR is released (https://github.com/facebook/jest/pull/2483),\n// setting up the mock can be done in\n//   __mocks__/@commercetools/sdk-client.js\njest.mock('@commercetools/sdk-client', () =&gt; () =&gt; ({\n  execute: jest.fn(() =&gt; Promise.resolve('Hello')),\n}))\n\nconst createClient = require('@commercetools/sdk-client')\n\nconst client = createClient()\n\nfunction testImplementation(request, cb) {\n  client\n    .execute(request)\n    .then((result) =&gt; cb(null, result))\n    .catch((error) =&gt; cb(error))\n}\n\ndescribe('SDK client', () =&gt; {\n  it('use mocked version', () =&gt;\n    new Promise((resolve, reject) =&gt; {\n      testImplementation({ uri: '/foo/bar' }, (error, data) =&gt; {\n        if (error) {\n          reject(error)\n          return\n        }\n        expect(client.execute).toHaveBeenLastCalledWith({ uri: '/foo/bar' })\n        expect(data).toBe('Hello')\n        resolve()\n      })\n    }))\n})\n</code></pre>"},{"location":"sdk/upgrading-from-sphere-node-sdk/","title":"Upgrading from <code>sphere-node-sdk</code>","text":"<p>If you're still using the sphere-node-sdk, this guide will help you migrating to the new SDK. Overall it's a completely new library, although some of APIs didn't change much.</p> <p>The SDK officially supports <code>node --version</code> starting from <code>4</code>. Older versions might still work but we don't support them. Use them at your own risk or upgrade node version as well.</p>"},{"location":"sdk/upgrading-from-sphere-node-sdk/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Dependencies</li> <li>Example migration</li> <li>API differences</li> <li>Sync actions</li> <li>Request builder</li> <li>SphereClient options</li> <li>Implicit benefits</li> <li>Auth flows</li> <li>Always 100% compatibility with new API features</li> </ul>"},{"location":"sdk/upgrading-from-sphere-node-sdk/#dependencies","title":"Dependencies","text":"<p>The SDK is not a single package anymore, it's composed of different packages. It's up to you to pick only the packages that you need, many of them are optional and can also be replaced with custom implementations.</p> <p>All new packages are now scoped to <code>@commercetools</code>. This is mainly to have better package names and to have them all under commercetools organization.</p> <p>The core package is the <code>@commercetools/sdk-client</code>. Using it alone is useless, you need to provide at least a middleware (e.g. <code>@commercetools/sdk-middleware-http</code>).</p> <p>If you aim to have all the functionalities of the <code>sphere-node-sdk</code>, you probably need the following packages:</p> <ul> <li><code>@commercetools/sdk-client</code></li> <li><code>@commercetools/sdk-middleware-auth</code></li> <li><code>@commercetools/sdk-middleware-http</code></li> <li><code>@commercetools/sdk-middleware-queue</code></li> <li><code>@commercetools/sdk-middleware-logger</code></li> <li><code>@commercetools/sdk-middleware-user-agent</code></li> <li><code>@commercetools/api-request-builder</code></li> <li><code>@commercetools/sync-actions</code></li> </ul>"},{"location":"sdk/upgrading-from-sphere-node-sdk/#example-migration","title":"Example migration","text":"<pre><code>// before\nimport SphereClient, { ProductSync } from 'sphere-node-sdk'\nconst client = new SphereClient({\n  config: {\n    project_key: 'my-project',\n    client_id: '123',\n    client_secret: 'secret',\n  },\n  user_agent: 'sphere-node-sdk',\n  host: 'api.commercetools.com',\n  protocol: 'https',\n  oauth_host: 'auth.commercetools.com',\n  oauth_protocol: 'https',\n})\nconst sync = new ProductSync()\nconst updateActions = sync.buildActions(/* newProduct, existingProduct */)\nclient.products\n  .byId('1')\n  .expand('productType')\n  .update({ version: 1, actions: updateActions })\n  .then(/* result */)\n  .catch(/* error */)\n\n// after\nimport { createClient } from '@commercetools/sdk-client'\nimport { createAuthMiddlewareForClientCredentialsFlow } from '@commercetools/sdk-middleware-auth'\nimport { createHttpMiddleware } from '@commercetools/sdk-middleware-http'\nimport { createQueueMiddleware } from '@commercetools/sdk-middleware-queue'\nimport { createUserAgentMiddleware } from '@commercetools/sdk-middleware-user-agent'\nimport { createRequestBuilder } from '@commercetools/api-request-builder'\nimport { createSyncProducts } from '@commercetools/sync-actions'\n\nconst client = createClient({\n  // The order of the middlewares is important !!!\n  middlewares: [\n    createAuthMiddlewareForClientCredentialsFlow({\n      host: 'https://auth.commercetools.com',\n      projectKey: 'my-project',\n      credentials: {\n        clientId: '123',\n        clientSecret: 'secret',\n      },\n    }),\n    createQueueMiddleware({ concurrency: 10 }),\n    createHttpMiddleware({ host: 'https://api.commercetools.com' }),\n    createHttpUserAgent({\n      libraryName: 'my-library',\n      libraryVersion: '1.0.0',\n      contactUrl: 'https://github.com/commercetools/nodejs',\n      contactEmail: 'npmjs@commercetools.com',\n    }),\n  ],\n})\nconst service = createRequestBuilder({ projectKey: 'my-project' }).products\nconst uri = service.byId('1').expand('productType').build()\nconst sync = createSyncProducts()\nconst updateActions = sync.buildActions(/* newProduct, existingProduct */)\nconst updateRequest = {\n  uri,\n  method: 'POST',\n  body: { version: 1, actions: updateActions },\n}\nclient.execute(updateRequest).then(/* result */).catch(/* error */)\n</code></pre>"},{"location":"sdk/upgrading-from-sphere-node-sdk/#api-differences","title":"API differences","text":""},{"location":"sdk/upgrading-from-sphere-node-sdk/#sync-actions","title":"Sync actions","text":"<p>In the <code>sphere-node-sdk</code> the sync utils were exported within the same package. In the new SDK they are scoped in their own module and they implement only 1 main function: <code>buildActions</code>.</p> <pre><code>// before\nimport { ProductSync } from 'sphere-node-sdk'\nconst sync = new ProductSync()\nconst payload = sync.buildActions(...).getUpdatePayload()\n\n// after\nimport { createSyncProducts } from '@commercetools/sync-actions'\nconst sync = createSyncProducts()\nconst actions = sync.buildActions(...)\nconst payload = { version: 1, actions }\n</code></pre>"},{"location":"sdk/upgrading-from-sphere-node-sdk/#request-builder","title":"Request builder","text":"<p>In the <code>sphere-node-sdk</code> you were building the request for each service by chaining different commands and executing <code>fetch</code>, <code>update</code>, etc at the end. In the new SDK, we saw that the <code>sdk-client</code> simply accepts a request object. The <code>uri</code> parameter can be simply defined manually or can be generated using the request builder. This has basically the same API as the <code>sphere-node-sdk</code>.</p> <pre><code>// before\nimport SphereClient from 'sphere-node-sdk'\nconst client = new SphereClient({ config: { projectKey: 'my-project' } })\nclient.channels.perPage(10).fetch()\n\n\n// after\nimport { createClient } from '@commercetools/sdk-client'\nimport { createRequestBuilder } from '@commercetools/api-request-builder'\nconst client = createClient({ middlewares: [...] })\nclient.execute({\n  // manually define the request URI\n  uri: '/my-project/channels?limit=10',\n  method: 'GET',\n})\n\nconst channels = createRequestBuilder({ projectKey: 'my-project' }).channels\nclient.execute({\n  // define the request URI using the request builder\n  uri: channels.perPage(10).build(),\n  method: 'GET',\n})\n</code></pre> <p>Additionally, all services provided by the request builder are defined using features. This allows to configure a service with only the features or functions that the service supports. The package allows also to pass custom services.</p> <pre><code>import {\n  createRequestBuilder,\n  features,\n} from '@commercetools/api-request-builder'\nconst customServices = {\n  users: {\n    type: 'users',\n    endpoint: '/users',\n    features: [features.query, features.queryOne],\n  },\n}\nconst requestBuilder = createRequestBuilder(\n  { projectKey: 'my-project' },\n  customServices\n)\nrequestBuilder.users.byId('1').build()\n</code></pre>"},{"location":"sdk/upgrading-from-sphere-node-sdk/#sphereclient-options","title":"SphereClient options","text":"<p>In the <code>sphere-node-sdk</code> all sorts of configuration options were passed as a big object to the <code>SphereClient</code> contructor. In the new SDK all those options are split across the middlewares. See example above.</p>"},{"location":"sdk/upgrading-from-sphere-node-sdk/#implicit-benefits","title":"Implicit benefits","text":""},{"location":"sdk/upgrading-from-sphere-node-sdk/#auth-flows","title":"Auth flows","text":"<p>In the <code>sphere-node-sdk</code> the way of getting an access_token was restricted to the client credentials flow and it wasn't possible to define the scopes for the token. In the new SDK, because of the flexibility that the middlewares provide, it's possible to have all sorts of different auth flows.</p>"},{"location":"sdk/upgrading-from-sphere-node-sdk/#always-100-compatibility-with-new-api-features","title":"Always 100% compatibility with new API features","text":"<p>In the <code>sphere-node-sdk</code> requests for a service had to be defined using the methods that the service provided. If the commercetools HTTP API would release new endpoints or new request options, the SDK had to be adjusted in order to support those new features. In the new SDK this problem becomes obsolete because the request URI can simply be provided manually. The request builder is just a helper to construct the URI for a given service but the URI can be typed manually as well.</p> <pre><code>client.execute({\n  uri: '/my-project/some-new-endpoint?wow=this-is-a-new-query-option',\n})\n</code></pre>"},{"location":"sdk/api/","title":"API Reference","text":"<p>This section documents the SDK packages APIs.</p>"},{"location":"sdk/api/#importing","title":"Importing","text":"<p>Every function described in each package below is a top-level export. You can import any of them like this:</p>"},{"location":"sdk/api/#es6","title":"ES6","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\n</code></pre>"},{"location":"sdk/api/#es5-commonjs","title":"ES5 (CommonJS)","text":"<pre><code>var createClient = require('@commercetools/sdk-client').createClient\n</code></pre>"},{"location":"sdk/api/#es5-umd-build","title":"ES5 (UMD build)","text":"<pre><code>// We recommend to use https://unpkg.com as CDN\nvar createClient = CommercetoolsSdkClient.createClient\n</code></pre>"},{"location":"sdk/api/#core","title":"Core","text":""},{"location":"sdk/api/#sdk-client","title":"<code>sdk-client</code>","text":"<p>Core package to enable executing HTTP request. To be used together with middlewares.</p> <ul> <li>createClient(options)</li> </ul>"},{"location":"sdk/api/#middlewares","title":"Middlewares","text":"<p>It's up to you to pick whatever middleware fits your needs: you can compose them together, create your own custom versions, choose only one of them (e.g. you might not need authentication, but you need to send http requests).</p>"},{"location":"sdk/api/#sdk-middleware-auth","title":"<code>sdk-middleware-auth</code>","text":"<p>Middleware to authenticate the request using one of the supported auth flows.</p> <ul> <li>createAuthMiddlewareForClientCredentialsFlow(options)</li> <li>createAuthMiddlewareForPasswordFlow(options)</li> <li>createAuthMiddlewareForRefreshTokenFlow(options)</li> <li>createAuthMiddlewareForAnonymousSessionFlow(options)</li> <li>createAuthMiddlewareWithExistingToken(authorization, options)</li> </ul>"},{"location":"sdk/api/#sdk-middleware-http","title":"<code>sdk-middleware-http</code>","text":"<p>Middleware to send the actual HTTP request.</p> <ul> <li>createHttpMiddleware(options)</li> <li>getErrorByCode(code)</li> </ul>"},{"location":"sdk/api/#sdk-middleware-queue","title":"<code>sdk-middleware-queue</code>","text":"<p>Middleware to throttle concurrent request to a certain limit. Useful to reduce concurrent HTTP requests.</p> <ul> <li>createQueueMiddleware(options)</li> </ul>"},{"location":"sdk/api/#sdk-middleware-logger","title":"<code>sdk-middleware-logger</code>","text":"<p>Middleware to log incoming request and response objects.</p> <ul> <li>createLoggerMiddleware(options)</li> </ul>"},{"location":"sdk/api/#sdk-middleware-user-agent","title":"<code>sdk-middleware-user-agent</code>","text":"<p>Middleware to automatically set the <code>User-Agent</code> to the request.</p> <ul> <li>createUserAgentMiddleware(options)</li> </ul>"},{"location":"sdk/api/#sdk-middleware-correlation-id","title":"<code>sdk-middleware-correlation-id</code>","text":"<p>Middleware to add a correlation id to requests.</p> <ul> <li>createCorrelationIdMiddleware(options)</li> </ul>"},{"location":"sdk/api/#helpers","title":"Helpers","text":"<p>Those are optional packages that provides help building the final request. You can choose to use them but you don't have to.</p>"},{"location":"sdk/api/#api-request-builder","title":"<code>api-request-builder</code>","text":"<p>Provides an API to construct a URI for the HTTP API endpoints in a declarative way. Useful for building request <code>uri</code> for requests.</p> <ul> <li>createRequestBuilder(customServices)</li> </ul>"},{"location":"sdk/api/#http-user-agent","title":"<code>http-user-agent</code>","text":"<p>Creates a proper HTTP User-Agent. Can be used everywhere.</p> <ul> <li>createHttpUserAgent(options)</li> </ul>"},{"location":"sdk/api/#sync-actions","title":"<code>sync-actions</code>","text":"<p>Provides an API to construct update actions. Useful for building request <code>body</code> for updates.</p> <ul> <li>createSyncCategories(actionGroups)</li> <li>createSyncCustomers(actionGroups)</li> <li>createSyncInventories(actionGroups)</li> <li>createSyncProducts(actionGroups)</li> <li>createSyncOrders(actionGroups)</li> <li>createSyncDiscountCodes(actionGroups)</li> <li>createSyncProductDiscounts(actionGroups)</li> <li>createSyncCustomerGroup(actionGroups)</li> <li>createSyncCartDiscounts(actionGroups)</li> </ul>"},{"location":"sdk/api/apiRequestBuilder/","title":"<code>api-request-builder</code>","text":"<p>Provides an API to construct a URI for the HTTP API endpoints in a declarative way. Useful for building request <code>uri</code> for requests.</p>"},{"location":"sdk/api/apiRequestBuilder/#install","title":"Install","text":""},{"location":"sdk/api/apiRequestBuilder/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/api-request-builder\n</code></pre>"},{"location":"sdk/api/apiRequestBuilder/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/api-request-builder/dist/commercetools-api-request-builder.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsApiRequestBuilder\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/apiRequestBuilder/#createrequestbuilderoptions","title":"<code>createRequestBuilder(options)</code>","text":"<p>Creates a request builder that allows to declaratively build a HTTP API request URI for the commercetools platform.</p>"},{"location":"sdk/api/apiRequestBuilder/#arguments","title":"Arguments","text":"<p>The <code>options</code> argument must be an object with a <code>projectKey</code> property, and optionally a <code>customServices</code> property</p> <pre><code>    options -&gt; { projectKey, customServices }\n</code></pre> <ol> <li><code>projectKey</code> (String): A required string specifying the project key to use for the request. Even though this is required, the project key can be omitted from the URI by passing <code>{withProjectKey: false}</code> to <code>.build()</code></li> <li><code>customServices</code> (Object): A map of custom services that are not provided by default. This might be useful to build a request for a different API with similar query parameters.</li> </ol> <p>A service is created by defining its <code>features</code>. Features give a service specific characteristics to correctly build URIs. For example, if a service can query a resource by ID you would include <code>queryOne</code>. Available features types are:</p> <ul> <li><code>query</code>: allows to use standard query capabilities (<code>page</code>, <code>perPage</code>, <code>sort</code>, <code>where</code>, <code>whereOperator</code>)</li> <li><code>queryOne</code>: allows to query a single resource (<code>byId</code>, <code>byKey</code>, <code>byCustomerId</code>, <code>byCartId</code>)</li> <li><code>queryLocation</code>: allows to query resources by location (<code>byCountry</code>, <code>byCurrency</code>, <code>byState</code>)</li> <li><code>queryExpand</code>: allows to use reference expansion (<code>expand</code>)</li> <li><code>search</code>: allows to use search capabilities (<code>text</code>, <code>fuzzy</code>, <code>fuzzyLevel</code>, <code>facet</code>, <code>markMatchingVariants</code>, <code>filter</code>, <code>filterByQuery</code>, <code>filterByFacets</code>)</li> <li><code>projection</code>: allows to use projections capabilities (<code>staged</code>, <code>priceCurrency</code>, <code>priceCountry</code>, <code>priceCustomerGroup</code>, <code>priceChannel</code>)</li> <li><code>suggest</code>: allows to use suggest capabilities (<code>searchKeywords</code>)</li> </ul> <pre><code>import {\n  createRequestBuilder,\n  features,\n} from '@commercetools/api-request-builder'\nconst options = {\n  projectKey: 'my-project',\n  customServices: {\n    users: {\n      type: 'users',\n      endpoint: '/users',\n      features: [features.query, features.queryOne],\n    },\n  },\n}\nconst requestBuilder = createRequestBuilder(options)\n</code></pre>"},{"location":"sdk/api/apiRequestBuilder/#default-services","title":"Default Services","text":"<pre><code>const requestBuilder = createRequestBuilder(options)\nconst uri = requestBuilder.productProjections.build()\n// uri = \"/project-key/product-projections\"\n</code></pre> <p>Default services match the commercetools API using a camel-case convention.</p> Endpoints Service Features /login login create /cart-discounts cartDiscounts create, update, del, query, queryOne, queryExpand /carts carts create, update, del, query, queryOne, queryExpand /categories categories create, update, del, query, queryOne, queryExpand /channels channels create, update, del, query, queryOne, queryExpand /customer-groups customerGroups create, update, del, query, queryOne, queryExpand /customers customers create, update, del, query, queryOne, queryExpand /customers/password customersPassword create /customers/password-token customersPasswordToken create, queryOne /customers/password/reset customersPasswordReset create /customers/email-token customersEmailVerificationToken create, queryOne /customers/email/confirm customersEmailVerification create /custom-objects customObjects create, update, del, query, queryOne /discount-codes discountCodes create, update, del, query, queryOne, queryExpand /extensions extensions create, update, del, query, queryOne, queryExpand /inventory inventory create, update, del, query, queryOne, queryExpand /messages messages query, queryOne, queryExpand /me/active-cart myActiveCart queryOne /me/carts myCarts create, update, del, query, queryOne, queryExpand /me/orders myOrders create, update, del, query, queryOne, queryExpand /orders orders create, update, del, query, queryOne, queryExpand /orders/edits orderEdits create, update, del, query, queryOne, queryExpand /orders/import orderImport create, query /payments payments create, update, del, query, queryOne, queryExpand /product-discounts productDiscounts create, update, del, query, queryOne, queryExpand /product-projections productProjections query, queryOne, queryExpand, projection /product-projections/search productProjectionsSearch search, queryOne, queryExpand, projection /product-projections/suggest productProjectionsSuggest search, suggest, queryOne, projection /products products create, update, del, query, queryOne, queryExpand /product-types productTypes create, update, del, query, queryOne, queryExpand / project update, query /reviews reviews create, update, del, query, queryOne, queryExpand /shipping-methods shippingMethods create, update, del, query, queryOne, queryExpand, queryLocation /shopping-lists shoppingLists create, update, del, query, queryOne, queryExpand /states states create, update, del, query, queryOne, queryExpand /subscriptions subscriptions create, update, del, query, queryOne, queryExpand /tax-categories taxCategories create, update, del, query, queryOne, queryExpand /types types create, update, del, query, queryOne, queryExpand /zones zones create, update, del, query, queryOne, queryExpand <p>Note that <code>markMatchingVariants</code> is set by default to <code>false</code> which turns off this feature on the API.</p>"},{"location":"sdk/api/apiRequestBuilder/#staged","title":"Staged","text":"<p>It is possible to add the <code>staged</code> boolean option to the uri. This decides wether to query the <code>current</code> or <code>staged</code> projections, for example in Product Projections. (Defaults to false)</p> <pre><code>const service = createRequestBuilder(options)\nconst uri = service.productProjections.staged(true).build()\n</code></pre>"},{"location":"sdk/api/apiRequestBuilder/#version","title":"Version","text":"<p>It is also possible to append the version of a resource to the uri when making a request that requires this (for example a <code>DELETE</code> request). This can be done by passing the required version to the <code>.withVersion()</code> method.</p> <pre><code>const service = createRequestBuilder(options)\nconst uri = service.channels.withVersion(2).build()\n</code></pre>"},{"location":"sdk/api/apiRequestBuilder/#queryone","title":"QueryOne","text":"<p>It is also possible to query for just one resource. QueryOne consists of <code>byId</code>, <code>byKey</code>, <code>byCustomerId</code>, <code>byCartId</code>.</p> <p>When retrieving a resource using it's own ID, use <code>byId</code> or <code>byKey</code>.</p> <pre><code>const requestBuilder = createRequestBuilder(options)\nconst uri = requestBuilder.carts.byId('cartId').build()\n</code></pre> <p>When retrieving a resource by a customer or cart reference use <code>byCustomerId</code> or <code>byCartId</code>.</p> <pre><code>const requestBuilder = createRequestBuilder(options)\nconst uri = requestBuilder.carts.byCustomerId('customerId').build()\n</code></pre>"},{"location":"sdk/api/apiRequestBuilder/#dataerasure","title":"dataErasure","text":"<p>You can also append the <code>dataErasure</code> option to the uri when making a delete request if you want to make sure all related data is deleted. For example, regarding the GDPR, this means that all personal data related to the particular object, including invisible data, is erased. More info here</p> <p>This can be done by using the <code>.withFullDataErasure()</code> method.</p> <pre><code>const service = createRequestBuilder(options)\nconst deleteUri = service.payments\n  .byId(12345)\n  .withVersion(3)\n  .withFullDataErasure()\n  .build()\n</code></pre>"},{"location":"sdk/api/apiRequestBuilder/#withtotal","title":"withTotal","text":"<p>You can also append the <code>withTotal</code> option to the uri when making a query. More info here.</p> <p>This can be done by using the <code>.withTotal(false)</code> method.</p> <pre><code>const service = createRequestBuilder(options)\nconst getUri = service.orders.withTotal(false).build()\n</code></pre>"},{"location":"sdk/api/apiRequestBuilder/#usage-example","title":"Usage example","text":"<pre><code>import { createRequestBuilder } from '@commercetools/api-request-builder'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst requestBuilder = createRequestBuilder({ projectKey: 'my-project-key' })\nconst client = createClient({\n  middlewares: [...],\n})\nconst channelsUri = requestBuilder.channels\n  .where('key = \"foo\"')\n  .perPage(1)\n  .withVersion(3)\n  .build()\nconst channelsRequest = {\n  uri: channelsUri,\n  method: 'GET',\n}\n\nclient.execute(channelsRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/apiRequestBuilder/#declarative-usage","title":"Declarative Usage","text":"<p>A declarative API exists as an alternative to the imperative API (shown in the example above).</p> <pre><code>// same imports and instantiation as above\nconst channelsUri = requestBuilder.channels\n  .parse({\n    where: ['key = \"foo\"'],\n    perPage: 1,\n    version: 3,\n  })\n  .build()\n</code></pre> <p>Type of Params This declarative <code>parse</code> API accepts an object of the following shape:</p> <pre><code>{\n  // query-expand\n  expand?: Array&lt;string&gt;;\n\n  // query-id\n  id?: ?string;\n  key?: ?string;\n  customerId?: ?string;\n  cartId?: ?string;\n\n  // query-location\n  country?: ?string;\n  currency?: ?string;\n  state?: ?string;\n\n  // query-page\n  sort: Array&lt;{ by: string, direction: 'asc' | 'desc' }&gt;;\n  page: ?number;\n  perPage: ?number;\n\n  // query-projection\n  staged?: boolean;\n  priceCurrency?: string;\n  priceCountry?: string;\n  priceCustomerGroup?: string;\n  priceChannel?: string;\n\n  // query-search\n  text?: ?{\n    language?: string;\n    value?: string;\n  };\n  fuzzy?: boolean;\n  fuzzyLevel?: number;\n  markMatchingVariants?: boolean;\n  facet?: Array&lt;string&gt;;\n  filter?: Array&lt;string&gt;;\n  filterByQuery?: Array&lt;string&gt;;\n  filterByFacets?: Array&lt;string&gt;;\n\n  // query-suggest\n  searchKeywords?: Array&lt;{language: string; value: string;}&gt;;\n\n  // query\n  where?: Array&lt;string&gt;;\n  whereOperator?: 'and' | 'or';\n\n  // version\n  version?: string;\n\n  // dataErasure\n  dataErasure?: string;\n\n  // params\n  orderNumber?: number;\n}\n</code></pre> <p>Mixed usage</p> <p>The imperative API can be mixed with the declarative one.</p> <pre><code>// these both lead to the same result\nrequestBuilder.channels.parse({ page: 5 }).perPage(10).build()\nrequestBuilder.channels.perPage(10).parse({ page: 5 }).build()\n</code></pre>"},{"location":"sdk/api/getCredentials/","title":"<code>get-credentials</code>","text":"<p>Retrieve commercetools project credentials from environment variables or file system.</p>"},{"location":"sdk/api/getCredentials/#install","title":"Install","text":"<pre><code>npm install --save @commercetools/get-credentials\n</code></pre>"},{"location":"sdk/api/getCredentials/#usage","title":"Usage","text":"<p>Getting the credentials in comes in two ways where the environment variable has priority:</p>"},{"location":"sdk/api/getCredentials/#from-environment-variables","title":"From environment variables","text":"<p>Read the credentials from an environment variable named after the project key like: <code>CT_&lt;project key&gt;</code>. The contained credentials are expected like this: <code>&lt;client id&gt;:&lt;client secret&gt;</code>. Notice that the given project key will be uppercased and dashes will be replaced by an underscore. So for example: <code>my-projectkey</code> becomes <code>MY_PROJECTKEY</code>.</p>"},{"location":"sdk/api/getCredentials/#from-a-file","title":"From a file","text":"<p>Read the credentials from a <code>dotenv</code> file in the following locations, descending priority:</p> <ul> <li><code>./.ct-credentials.env</code> Current directory</li> <li><code>/etc/.ct-credentials.env</code></li> </ul> <p>Example <code>ct-credentials.env</code> file:</p> <pre><code>CT_MY_PROJECTKEY=myclientid:mysecret\nCT_OTHER_PROJECTKEY=myclientid:mysecret\n</code></pre>"},{"location":"sdk/api/getCredentials/#getcredentialsprojectkey","title":"<code>getCredentials(projectKey)</code>","text":"<p>Set environment variables from a <code>dotenv</code> file and load the credentials from an environment variable based on the passed project key.</p>"},{"location":"sdk/api/getCredentials/#arguments","title":"Arguments","text":"<ol> <li><code>projectKey</code> (String): The project key to retrieve the associated client credentials for.</li> </ol>"},{"location":"sdk/api/getCredentials/#returns","title":"Returns","text":"<p>Returns a <code>Promise</code> which resolves to <code>{ clientId, clientSecret }</code>. When no credentials are found for the given project key an error is rejected.</p>"},{"location":"sdk/api/getCredentials/#usage-example","title":"Usage example","text":"<pre><code>import { getCredentials } from '@commercetools/get-credentials'\n\ngetCredentials('my-project-key').then(console.log).catch(console.error)\n</code></pre>"},{"location":"sdk/api/httpUserAgent/","title":"<code>http-user-agent</code>","text":"<p>Creates a proper HTTP User-Agent. Can be used everywhere.</p>"},{"location":"sdk/api/httpUserAgent/#install","title":"Install","text":""},{"location":"sdk/api/httpUserAgent/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/http-user-agent\n</code></pre>"},{"location":"sdk/api/httpUserAgent/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/http-user-agent/dist/commercetools-http-user-agent.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsHttpUserAgent\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/httpUserAgent/#createhttpuseragentoptions","title":"<code>createHttpUserAgent(options)</code>","text":"<p>Creates a proper HTTP <code>User-Agent</code>.</p>"},{"location":"sdk/api/httpUserAgent/#named-arguments-options","title":"Named arguments (options)","text":"<ol> <li><code>name</code> (String): the name of the client sending the request (required)</li> <li><code>version</code> (String): the version of the client sending the request (optional)</li> <li><code>libraryName</code> (String): the name of the library / package / application using the SDK (optional)</li> <li><code>libraryVersion</code> (String): the version of the library / package / application using the SDK (optional)</li> <li><code>contactUrl</code> (String): the contact URL of the library / package / application using the SDK (optional)</li> <li><code>contactEmail</code> (String): the contact email of the library / package / application using the SDK (optional)</li> </ol>"},{"location":"sdk/api/httpUserAgent/#usage-example","title":"Usage example","text":"<pre><code>import createHttpUserAgent from '@commercetools/http-user-agent'\n\nconst userAgent = createHttpUserAgent({\n  name: 'commercetools-node-sdk',\n  version: '1.0.0',\n  libraryName: 'my-awesome-library',\n  libraryVersion: '1.0.0',\n  contactUrl: 'https://github.com/my-company/my-awesome-library'\n  contactEmail: 'helpdesk@commercetools.com'\n}),\n\n// The User-Agent will be something like:\n// commercetools-node-sdk/1.0.0 Node.js/6.9.0 (darwin; x64) my-awesome-library/1.0.0 (+https://github.com/my-company/my-awesome-library; +helpdesk@commercetools.com)\n</code></pre>"},{"location":"sdk/api/sdkAuth/","title":"<code>sdk-auth</code>","text":"<p>Auth module for different authorization flows of commercetools platform API</p>"},{"location":"sdk/api/sdkAuth/#install","title":"Install","text":""},{"location":"sdk/api/sdkAuth/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/sdk-auth\n</code></pre>"},{"location":"sdk/api/sdkAuth/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/sdk-auth/dist/commercetools-sdk-auth.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsSdkAuth\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/sdkAuth/#initialization","title":"Initialization","text":"<p>Creates an auth client to handle authorization against the commercetools platform API.</p>"},{"location":"sdk/api/sdkAuth/#named-arguments-options","title":"Named arguments (options)","text":"<ol> <li><code>host</code> (String): the host of the OAuth API service</li> <li><code>projectKey</code> (String): the key of the project to assign the default scope to (optional).</li> <li><code>authType</code> (String): Auth type performed in the auth request (default <code>Basic</code>).</li> <li><code>token</code> (String): A <code>token</code> which will be sent in <code>Authorization</code> header. If not provided, we calculate it from credentials.</li> <li><code>disableRefreshToken</code> (boolean): whether the API should generate a refresh token</li> <li><code>credentials</code> (Object): the client credentials for authentication (<code>clientId</code>, <code>clientSecret</code>)</li> <li><code>scopes</code> (Array): a list of scopes (default <code>manage_project:{projectKey}</code>) to assign to the OAuth token</li> <li><code>fetch</code> (Function): A <code>fetch</code> implementation which can be e.g. <code>node-fetch</code> or <code>unfetch</code> but also the native browser <code>fetch</code> function. Only needs be be passed if not globally available (e.g. through <code>isomorphic-fetch</code>)</li> </ol>"},{"location":"sdk/api/sdkAuth/#usage-example","title":"Usage example","text":"<pre><code>import SdkAuth from '@commercetools/sdk-auth'\nimport fetch from 'node-fetch'\n\nconst authClient = new SdkAuth({\n  host: 'https://auth.commercetools.com',\n  projectKey: 'test',\n  disableRefreshToken: false,\n  credentials: {\n    clientId: '123',\n    clientSecret: 'secret',\n  },\n  scopes: ['view_products:test', 'manage_orders:test'],\n  fetch,\n})\n\nconst token = await authClient.clientCredentialsFlow()\n</code></pre> <p>NOTE: All auth flow methods can accept also an additional configuration for overriding config properties which were set during object creation.</p> <pre><code>const token = await authClient.clientCredentialsFlow({\n  scopes: ['view_products:test', 'manage_orders:test'],\n})\n</code></pre>"},{"location":"sdk/api/sdkAuth/#authorization-flows","title":"Authorization Flows","text":""},{"location":"sdk/api/sdkAuth/#client-credentials-flow","title":"Client Credentials Flow","text":"<p>Fetches access token using Client Credentials Flow from the commercetools platform API.</p>"},{"location":"sdk/api/sdkAuth/#argument","title":"Argument","text":"<ol> <li><code>config</code> (Object): Optional configuration which can override config properties given when building <code>authClient</code> object.</li> </ol>"},{"location":"sdk/api/sdkAuth/#usage-example_1","title":"Usage example","text":"<pre><code>await authClient.clientCredentialsFlow()\n// {\n//   \"access_token\": \"...\",\n//   \"expires_in\": 172800, // lifetime of access_token in seconds\n//   \"expires_at\": 1542287072875, // UTC datetime in unix timestamp format when the token expires\n//   \"scope\": \"manage_project:{projectKey}\",\n//   \"token_type\": \"Bearer\",\n// }\n</code></pre>"},{"location":"sdk/api/sdkAuth/#customer-password-flow","title":"Customer Password Flow","text":"<p>Fetches access token using Password Flow from the commercetools platform API.</p>"},{"location":"sdk/api/sdkAuth/#argument_1","title":"Argument","text":"<ol> <li><code>credentials</code> (Object): Object with named arguments containing user credentials<ul> <li><code>username</code> (String): customer email</li> <li><code>password</code> (String): customer password</li> </ul> </li> <li><code>config</code> (Object): Optional configuration which can override config properties given when building <code>authClient</code> object.</li> </ol>"},{"location":"sdk/api/sdkAuth/#usage-example_2","title":"Usage example","text":"<pre><code>await authClient.customerPasswordFlow(\n  {\n    username: '...',\n    password: '...',\n  },\n  {\n    disableRefreshToken: false,\n  }\n)\n// {\n//   \"access_token\": \"...\",\n//   \"expires_in\": 172800,\n//   \"expires_at\": 1542287072875,\n//   \"scope\": \"manage_project:{projectKey}\",\n//   \"token_type\": \"Bearer\",\n//\n//   \"refresh_token\" is missing because it was disabled in configuration\n//\n// }\n</code></pre>"},{"location":"sdk/api/sdkAuth/#client-password-flow","title":"Client Password Flow","text":"<p>Same as <code>customerPasswordFlow</code> but performs auth request against <code>/oauth/token</code> endpoint instead.</p>"},{"location":"sdk/api/sdkAuth/#argument_2","title":"Argument","text":"<ol> <li><code>credentials</code> (Object): Object with named arguments containing user credentials<ul> <li><code>username</code> (String): client email</li> <li><code>password</code> (String): client password</li> </ul> </li> <li><code>config</code> (Object): Optional configuration which can override config properties given when building <code>authClient</code> object.</li> </ol>"},{"location":"sdk/api/sdkAuth/#usage-example_3","title":"Usage example","text":"<pre><code>await authClient.clientPasswordFlow({\n  username: '...',\n  password: '...',\n})\n// {\n//   \"access_token\": \"...\",\n//   \"expires_in\": 172800,\n//   \"expires_at\": 1542287072875,\n//   \"scope\": \"manage_project:{projectKey}\",\n//   \"refresh_token\": \"...\",\n//   \"token_type\": \"Bearer\",\n// }\n</code></pre>"},{"location":"sdk/api/sdkAuth/#refresh-token-flow","title":"Refresh Token Flow","text":"<p>Fetches a new access token using Refresh Token Flow from the commercetools platform API.</p>"},{"location":"sdk/api/sdkAuth/#argument_3","title":"Argument","text":"<ol> <li><code>token</code> (String): <code>refresh_token</code> obtained from previous authorization process</li> <li><code>config</code> (Object): Optional configuration which can override config properties given when building <code>authClient</code> object.</li> </ol>"},{"location":"sdk/api/sdkAuth/#usage-example_4","title":"Usage example","text":"<pre><code>await authClient.refreshTokenFlow('refreshToken')\n// {\n//   \"access_token\": \"...\",\n//   \"token_type\": \"Bearer\",\n//   \"expires_in\": 172800,\n//   \"expires_at\": 1542287072875,\n//   \"scope\": \"manage_project:{projectKey}\",\n// }\n</code></pre>"},{"location":"sdk/api/sdkAuth/#anonymous-session-flow","title":"Anonymous Session Flow","text":"<p>Fetches access token using Anonymous Session Flow from the commercetools platform API.</p>"},{"location":"sdk/api/sdkAuth/#argument_4","title":"Argument","text":"<ol> <li><code>anonymousId</code> (Number): Id parameter which will be associated with generated access token. If not provided, API will autogenerate its own id.</li> <li><code>config</code> (Object): Optional configuration which can override config properties given when building <code>authClient</code> object.</li> </ol>"},{"location":"sdk/api/sdkAuth/#usage-example_5","title":"Usage example","text":"<pre><code>await authClient.anonymousFlow(1)\n// {\n//   \"access_token\": \"...\",\n//   \"expires_in\": 172800,\n//   \"expires_at\": 1542287072875,\n//   \"scope\": \"manage_project:{projectKey}\",\n//   \"refresh_token\": \"...\",\n//   \"token_type\": \"Bearer\"\n// }\n</code></pre>"},{"location":"sdk/api/sdkAuth/#custom-flow","title":"Custom Flow","text":"<p>Runs a custom request based on given configuration.</p>"},{"location":"sdk/api/sdkAuth/#argument_5","title":"Argument","text":"<ol> <li><code>host</code> (String): the host of the OAuth API service</li> <li><code>uri</code> (String): path to login endpoint</li> <li><code>credentials</code> (Object): Optional object containing username and password for password authentication</li> <li><code>body</code> (String): request body formatted as <code>application/x-www-form-urlencoded</code> content type, see example here.</li> <li><code>authType</code> (String): Auth type performed in the auth request (default <code>Basic</code>).</li> <li><code>token</code> (String): A <code>token</code> which will be sent in <code>Authorization</code> header. If not provided, we calculate it from credentials.</li> <li><code>headers</code> (Object): Optional object containing headers which should be sent in auth request.</li> </ol>"},{"location":"sdk/api/sdkAuth/#usage-example_6","title":"Usage example","text":"<pre><code>await authClient.customFlow({\n  host: 'https://custom.url',\n  uri: '/login',\n  body: JSON.stringify({\n    username: 'username',\n    password: 'password',\n  }),\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n// {\n//   ...API response\n// }\n</code></pre>"},{"location":"sdk/api/sdkAuth/#token-introspection","title":"Token Introspection","text":"<p>Fetches info about <code>access_token</code> using Token Introspection from the commercetools platform API.</p>"},{"location":"sdk/api/sdkAuth/#argument_6","title":"Argument","text":"<ol> <li><code>token</code> (Number): access token which should be introspected.</li> <li><code>config</code> (Object): Optional configuration which can override config properties given when building <code>authClient</code> object.</li> </ol>"},{"location":"sdk/api/sdkAuth/#usage-example_7","title":"Usage example","text":"<pre><code>await authClient.introspectToken('valid_token')\n// {\n//   \"active\": true,\n//   \"scope\": \"manage_project:{projectKey}\",\n//   \"exp\": 1539430105805\n// }\n\nawait authClient.introspectToken('invalid_token')\n// {\n//   \"active\":false\n// }\n</code></pre>"},{"location":"sdk/api/sdkAuth/#token-provider","title":"Token Provider","text":"<p>Token provider is a special class which watches over <code>access_token</code> and refreshes it using <code>sdkAuth.refreshTokenFlow()</code> method if it is expired.</p>"},{"location":"sdk/api/sdkAuth/#constructor-argument","title":"Constructor argument","text":"<ol> <li><code>options</code> (Object): Configuration object<ul> <li><code>sdkAuth</code> - SdkAuth object initialized with project credentials</li> <li><code>fetchTokenInfo</code> - Optional function which will be called for retrieving <code>access_token</code> if the <code>tokenInfo</code> or <code>refresh_token</code> were not provided.</li> <li><code>onTokenInfoChanged</code> - Optional function which is being called when the tokenInfo gets changed (manually or by refresh process)</li> <li><code>onTokenInfoRefreshed</code> - Optional function which is being called when the tokenInfo gets refreshed</li> </ul> </li> <li><code>tokenInfo</code> (Object): Optional parameter containing token information loaded from one of auth flows (<code>{ access_token, refresh_token, expires_at }</code>)</li> </ol>"},{"location":"sdk/api/sdkAuth/#usage-example_8","title":"Usage example","text":"<p>Minimal example:</p> <pre><code>import SdkAuth, { TokenProvider } from '@commercetools/sdk-auth'\n\n// initiate TokenProvider\nconst tokenProvider = new TokenProvider({\n  sdkAuth: new SdkAuth({\n    // .. init SdkAuth\n  }),\n  fetchTokenInfo: (sdkAuth) =&gt; sdkAuth.clientCredentialsFlow(),\n})\n\n// get access token\nconst accessToken = await tokenProvider.getAccessToken()\n\n// get whole tokenInfo object\nconst tokenInfo = await tokenProvider.getTokenInfo()\n\n// invalidate current tokenInfo so the tokenProvider will use fetchTokenInfo fn to fetch new one\ntokenProvider.invalidateTokenInfo()\n</code></pre> <p>Another example:</p> <pre><code>import SdkAuth, { TokenProvider } from '@commercetools/sdk-auth'\n\nconst authClient = new SdkAuth({\n  // .. init SdkAuth\n})\n\n// get tokenInfo from authorization flow\nconst tokenInfo = await authClient.clientPasswordFlow({\n  username: '...',\n  password: '...',\n})\n\n// initiate TokenProvider\nconst tokenProvider = new TokenProvider(\n  {\n    sdkAuth,\n    onTokenInfoChanged: (newTokenInfo) =&gt;\n      console.log('Token info was changed', newTokenInfo),\n  },\n  tokenInfo\n)\n\n// tokenInfo can be provided also later using \"setTokenInfo()\" function\n// tokenProvider.setTokenInfo(tokenInfo)\n\n// get currently used token info\n// const usedTokenInfo = tokenProvider.getTokenInfo()\n\n// check access_token validity, refresh if needed and return it\nconst accessToken = await tokenProvider.getAccessToken()\n</code></pre>"},{"location":"sdk/api/sdkClient/","title":"<code>sdk-client</code>","text":"<p>Core package to enable executing HTTP request. To be used together with middlewares.</p>"},{"location":"sdk/api/sdkClient/#install","title":"Install","text":""},{"location":"sdk/api/sdkClient/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/sdk-client\n</code></pre>"},{"location":"sdk/api/sdkClient/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/sdk-client/dist/commercetools-sdk-client.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsSdkClient\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/sdkClient/#createclientoptions","title":"<code>createClient(options)</code>","text":"<p>Creates a client instance.</p>"},{"location":"sdk/api/sdkClient/#named-arguments-options","title":"Named arguments (options)","text":"<ol> <li><code>middlewares</code> (Array): A list of middlewares to be used within this client. The order of the middlewares is really important! (e.g. it does not make sense to put the <code>http</code> middleware before the <code>auth</code> middleware).</li> </ol>"},{"location":"sdk/api/sdkClient/#client-api","title":"Client API","text":""},{"location":"sdk/api/sdkClient/#executerequest","title":"<code>execute(request)</code>","text":"<p>Returns a <code>Promise</code> which gets resolved after all the provided middlewares have done their job with the given request / response. This is the primary method to use.</p> <ul> <li><code>request</code> (Object): A request object</li> </ul>"},{"location":"sdk/api/sdkClient/#usage-example","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createHttpMiddleware } from '@commercetools/sdk-middleware-http'\n\nconst client = createClient({\n  middlewares: [\n    createHttpMiddleware(),\n  ],\n})\nconst request = {\n  uri: '/foo/bar',\n  method: 'GET',\n  headers: {\n    Authorization: 'Bearer xxx',\n  },\n}\n\nclient.execute(request)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/sdkClient/#processrequest-processfn-options","title":"<code>process(request, processFn, options)</code>","text":"<p>This function should be used to iterate through all the pages of a HTTP Rest API endpoint. Given the request object, the first page result of the request query will be passed to the <code>processFn</code>. This function does whatever it needs to do with the data and returns itself a promise which will trigger fetching a new page. This goes on and on until all available pages of the request query have being fetched and processed. Returns a <code>Promise</code> with the accumulated result of each <code>processFn</code> calls.</p> <ul> <li><code>request</code> (Object): A request object</li> <li><code>processFn</code> (Function): A function that gets called on each API page iteration. The function gets as an argument the response of the API request and should return a <code>Promise</code> which will trigger the next iteration.</li> <li><code>options</code> (Object)</li> <li><code>accumulate</code> (Boolean): (default <code>true</code>) a flag to indicate whether all the results of the iterations should be accumulated. This is useful if you want to e.g. fetch all the entities of an API endpoint and do something with it at the end. Be careful that this might lead to memory problems if the fetched data gets too big. If it's not necessary to have all the data when the process function resolves, it's recommended to disable this option.</li> <li><code>total</code> (Number): a number to indicate the total amount of items to be fetched from all API calls</li> </ul>"},{"location":"sdk/api/sdkClient/#usage-example_1","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createHttpMiddleware } from '@commercetools/sdk-middleware-http'\nimport { createRequestBuilder } from '@commercetools/api-request-builder'\n\nconst requestBuilder = createRequestBuilder({ projectKey: 'foo' })\nconst productProjectionsService = requestBuilder.productProjections\nconst productsService = requestBuilder.products\n\nconst client = createClient({\n  middlewares: [\n    createHttpMiddleware(),\n  ],\n})\nconst uri = productProjectionsService\n  .where('masterData(published = \"false\")')\n  .where('masterData(hasStagedChanges = \"true\")')\n  .build()\n\nconst request = {\n  uri,\n  method: 'GET',\n  headers: {\n    Authorization: 'Bearer xxx',\n  },\n}\n\n// 1. We want to publish all products that are not published yet\nclient.process(\n  request,\n  (payload) =&gt; {\n    const results = payload.body.results\n    return Promise.all(\n      results.map(product =&gt;\n        client.execute({\n          uri: productsService.byId(product.id).build(),\n          method: 'POST',\n          body: JSON.stringify({\n            version: product.version,\n            actions: [{ action: 'publish' }]\n          }),\n          headers: request.headers,\n        })\n      ),\n    )\n  },\n  { accumulate: false, total: 40 },\n)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareAuth/","title":"<code>sdk-middleware-auth</code>","text":"<p>Middleware to authenticate the request using one of the supported auth flows.</p>"},{"location":"sdk/api/sdkMiddlewareAuth/#install","title":"Install","text":""},{"location":"sdk/api/sdkMiddlewareAuth/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/sdk-middleware-auth\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareAuth/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/sdk-middleware-auth/dist/commercetools-sdk-middleware-auth.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsSdkMiddlewareAuth\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareAuth/#createauthmiddlewareforclientcredentialsflowoptions","title":"<code>createAuthMiddlewareForClientCredentialsFlow(options)</code>","text":"<p>Creates a middleware to handle authentication for the Client Credentials Flow of the commercetools platform API.</p>"},{"location":"sdk/api/sdkMiddlewareAuth/#named-arguments-options","title":"Named arguments (options)","text":"<ol> <li><code>host</code> (String): the host of the OAuth API service</li> <li><code>projectKey</code> (String): the key of the project to assign the default scope to</li> <li><code>credentials</code> (Object): the client credentials for authentication (<code>clientId</code>, <code>clientSecret</code>)</li> <li><code>scopes</code> (Array): a list of scopes (default <code>manage_project:{projectKey}</code>) to assign to the OAuth token</li> <li><code>fetch</code> (Function): A <code>fetch</code> implementation which can be e.g. <code>node-fetch</code> or <code>unfetch</code> but also the native browser <code>fetch</code> function. Only needs be be passed if not globally available (e.g. through <code>isomorphic-fetch</code>)</li> <li><code>timeout</code> (Number): An optional number value (in milliseconds) which specifies when a request should timeout if authentication request fails to complete.</li> <li><code>getAbortController</code> (Function): An optional abortController class instance that should signal the http-client to abandon the current request instance.</li> </ol>"},{"location":"sdk/api/sdkMiddlewareAuth/#usage-example","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createAuthMiddlewareForClientCredentialsFlow } from '@commercetools/sdk-middleware-auth'\n\nconst client = createClient({\n  middlewares: [\n    createAuthMiddlewareForClientCredentialsFlow({\n      host: 'https://auth.commercetools.com',\n      projectKey: 'test',\n      credentials: {\n        clientId: '123',\n        clientSecret: 'secret',\n      },\n      scopes: ['view_products:test', 'manage_orders:test'],\n\n      // Optional if not globally available\n      fetch,\n      timeout: 10000, // timeout the request if it doesn't complete in 10000ms or 10 seconds\n      getAbortController: () =&gt; new AbortController(),\n    }),\n  ],\n})\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareAuth/#createauthmiddlewareforpasswordflowoptions","title":"<code>createAuthMiddlewareForPasswordFlow(options)</code>","text":"<p>Creates a middleware to handle authentication for the Password Flow of the commercetools platform API.</p>"},{"location":"sdk/api/sdkMiddlewareAuth/#named-arguments-options_1","title":"Named arguments (options)","text":"<ol> <li><code>host</code> (String): the host of the OAuth API service</li> <li><code>projectKey</code> (String): the key of the project to assign the default scope to</li> <li> <p><code>credentials</code> (Object): the client credentials for authentication (<code>clientId</code>, <code>clientSecret</code>, <code>user</code>)</p> </li> <li> <p>The <code>user</code> field is an object containing <code>username</code> and <code>password</code>. Sample below</p> </li> <li> <p><code>scopes</code> (Array): a list of scopes to assign to the OAuth token. No default scope is sent</p> </li> <li><code>fetch</code> (Function): A <code>fetch</code> implementation which can be e.g. <code>node-fetch</code> or <code>unfetch</code> but also the native browser <code>fetch</code> function. Only needs be be passed if not globally available (e.g. through <code>isomorphic-fetch</code>)</li> <li><code>timeout</code> (Number): An optional number value (in milliseconds) which specifies when a request should timeout if authentication request fails to complete.</li> <li><code>getAbortController</code> (Function): An optional abortController class instance that should signal the http-client to abandon the current request instance.</li> </ol>"},{"location":"sdk/api/sdkMiddlewareAuth/#usage-example_1","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createAuthMiddlewareForPasswordFlow } from '@commercetools/sdk-middleware-auth'\n\nconst client = createClient({\n  middlewares: [\n    createAuthMiddlewareForPasswordFlow({\n      host: 'https://auth.commercetools.com',\n      projectKey: 'test',\n      credentials: {\n        clientId: '123',\n        clientSecret: 'secret',\n        user: {\n          username: string,\n          password: string,\n        },\n      },\n      scopes: ['view_products:test', 'manage_orders:test'],\n\n      // Optional if not globally available\n      fetch,\n      timeout: 10000, // timeout the request if it doesn't complete in 10000ms or 10 seconds\n      getAbortController: () =&gt; new AbortController(),\n    }),\n  ],\n})\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareAuth/#createauthmiddlewareforanonymoussessionflowoptions","title":"<code>createAuthMiddlewareForAnonymousSessionFlow(options)</code>","text":"<p>Creates a middleware to handle authentication for the Anonymous Session Flow of the commercetools platform API.</p>"},{"location":"sdk/api/sdkMiddlewareAuth/#named-arguments-options_2","title":"Named arguments (options)","text":"<ol> <li><code>host</code> (String): the host of the OAuth API service</li> <li><code>projectKey</code> (String): the key of the project to assign the default scope to</li> <li><code>credentials</code> (Object): the client credentials for authentication (<code>clientId</code>, <code>clientSecret</code>, <code>anonymousId</code>)</li> <li><code>scopes</code> (Array): a list of scopes (default <code>manage_project:{projectKey}</code>) to assign to the OAuth token</li> <li><code>fetch</code> (Function): A <code>fetch</code> implementation which can be e.g. <code>node-fetch</code> or <code>unfetch</code> but also the native browser <code>fetch</code> function. Only needs be be passed if not globally available (e.g. through <code>isomorphic-fetch</code>)</li> <li><code>timeout</code> (Number): An optional number value (in milliseconds) which specifies when a request should timeout if authentication request fails to complete.</li> <li><code>getAbortController</code> (Function): An optional abortController class instance that should signal the http-client to abandon the current request instance.</li> </ol>"},{"location":"sdk/api/sdkMiddlewareAuth/#usage-example_2","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createAuthMiddlewareForAnonymousSessionFlow } from '@commercetools/sdk-middleware-auth'\n\nconst client = createClient({\n  middlewares: [\n    createAuthMiddlewareForAnonymousSessionFlow({\n      host: 'https://auth.commercetools.com',\n      projectKey: 'test',\n      credentials: {\n        clientId: '123',\n        clientSecret: 'secret',\n        anonymousId: 'unique-id-of-customer-not-required',\n      },\n      scopes: ['view_products:test', 'manage_orders:test'],\n\n      // Optional if not globally available\n      fetch,\n      timeout: 10000, // timeout the request if it doesn't complete in 10000ms or 10 seconds\n      getAbortController: () =&gt; new AbortController(),\n    }),\n  ],\n})\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareAuth/#createauthmiddlewareforrefreshtokenflowoptions","title":"<code>createAuthMiddlewareForRefreshTokenFlow(options)</code>","text":"<p>Creates a middleware to handle authentication for the Refresh Token Flow of the commercetools platform API.</p>"},{"location":"sdk/api/sdkMiddlewareAuth/#named-arguments-options_3","title":"Named arguments (options)","text":"<ol> <li><code>host</code> (String): the host of the OAuth API service</li> <li><code>projectKey</code> (String): the key of the project to assign the default scope to</li> <li><code>credentials</code> (Object): the client credentials for authentication (<code>clientId</code>, <code>clientSecret</code>)</li> <li><code>refreshToken</code> (String): refreshToken from the API to use to fetch new token.</li> <li><code>fetch</code> (Function): A <code>fetch</code> implementation which can be e.g. <code>node-fetch</code> or <code>unfetch</code> but also the native browser <code>fetch</code> function. Only needs be be passed if not globally available (e.g. through <code>isomorphic-fetch</code>)</li> <li><code>timeout</code> (Number): An optional number value (in milliseconds) which specifies when a request should timeout if authentication request fails to complete.</li> <li><code>getAbortController</code> (Function): An optional abortController class instance that should signal the http-client to abandon the current request instance.</li> </ol>"},{"location":"sdk/api/sdkMiddlewareAuth/#usage-example_3","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createAuthMiddlewareForRefreshTokenFlow } from '@commercetools/sdk-middleware-auth'\n\nconst client = createClient({\n  middlewares: [\n    createAuthMiddlewareForRefreshTokenFlow({\n      host: 'https://auth.commercetools.com',\n      projectKey: 'test',\n      credentials: {\n        clientId: '123',\n        clientSecret: 'secret',\n      },\n      refreshToken: 'foobar123',\n\n      // Optional if not globally available\n      fetch,\n      timeout: 10000, // timeout the request if it doesn't complete in 10000ms or 10 seconds\n      getAbortController: () =&gt; new AbortController(),\n    }),\n  ],\n})\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareAuth/#createauthmiddlewarewithexistingtokenauthorization-options","title":"<code>createAuthMiddlewareWithExistingToken(authorization, options)</code>","text":"<p>Creates a middleware that attaches a provided access token <code>Authorization</code> header.</p>"},{"location":"sdk/api/sdkMiddlewareAuth/#named-arguments-authorization-options","title":"Named arguments (authorization, options)","text":"<p><code>authorization</code> (String): the value for the <code>Authorization</code> header. For example, you may pass the scheme <code>\"Bearer\"</code> (<code>\"Bearer 1234\"</code>) or <code>\"Basic\"</code> (<code>\"Basic 134\"</code>) and so on, depending on your authentication mechanism.</p> <p><code>options</code> is an optional (Object), having the following properties:</p> <ol> <li><code>force</code> (Boolean): if set to true, existing Authorization header (if any) in the request will be overridden with the supplied access token (Default: <code>true</code>)</li> <li><code>timeout</code> (Number): An optional number value (in milliseconds) which specifies when a request should timeout if authentication request fails to complete.</li> <li><code>getAbortController</code> (Function): An optional abortController class instance that should signal the http-client to abandon the current request instance.</li> </ol> <p>Note: if timeout is specified, then it's mandatory to also specify the getAbortController property.</p> <pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createAuthMiddlewareWithExistingToken } from '@commercetools/sdk-middleware-auth'\n\nconst accessToken = 'my-access-token'\n\nconst client = createClient({\n  middlewares: [\n    createAuthMiddlewareWithExistingToken(`Bearer ${accessToken}`, {\n      force: true,\n      timeout: 10000, // timeout the request if it doesn't complete in 10000ms or 10 seconds\n      getAbortController: () =&gt; new AbortController(),\n    }),\n  ],\n})\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareCorrelationId/","title":"<code>sdk-middleware-correlation-id</code>","text":"<p>Middleware add a correlation id to requests.</p>"},{"location":"sdk/api/sdkMiddlewareCorrelationId/#install","title":"Install","text":""},{"location":"sdk/api/sdkMiddlewareCorrelationId/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/sdk-middleware-correlation-id\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareCorrelationId/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/sdk-middleware-correlation-id/dist/commercetools-sdk-middleware-correlation-id.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsSdkMiddlewareCorrelationId\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareCorrelationId/#createcorrelationidmiddlewareoptions","title":"<code>createCorrelationIdMiddleware(options)</code>","text":"<p>Creates a middleware to add a correlation id to executed requests.</p>"},{"location":"sdk/api/sdkMiddlewareCorrelationId/#usage-example","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createCorrelationIdMiddleware } from '@commercetools/sdk-middleware-correlation-id'\nimport { createAuthMiddleware } from '@commercetools/sdk-middleware-auth'\nimport { createHttpMiddleware } from '@commercetools/sdk-middleware-http'\n\nconst client = createClient({\n  middlewares: [\n    createAuthMiddleware({...}),\n    createCorrelationIdMiddleware({\n      generate: () =&gt; `prefix/${uuid()}/postifx`\n    }),\n    createHttpMiddleware({...}),\n  ],\n})\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareHttp/","title":"<code>sdk-middleware-http</code>","text":"<p>Middleware to send the actual HTTP request.</p>"},{"location":"sdk/api/sdkMiddlewareHttp/#install","title":"Install","text":""},{"location":"sdk/api/sdkMiddlewareHttp/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/sdk-middleware-http\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareHttp/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/sdk-middleware-http/dist/commercetools-sdk-middleware-http.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsSdkMiddlewareHttp\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareHttp/#createhttpmiddlewareoptions","title":"<code>createHttpMiddleware(options)</code>","text":"<p>Creates a middleware to handle HTTP requests for the commercetools platform API.</p> <p>The HTTP middleware can run in either a browser or Node.js environment. For Node.js environments it is important to either have a <code>fetch</code> implementation either globally available via e.g. isomorphic-fetch or to pass it in as an argument (see below) via e.g. node-fetch. In browsers without a native <code>fetch</code> implementation any well known <code>fetch</code> polyfill should be compatible with the middleware such as whatwg-fetch or unfetch.</p>"},{"location":"sdk/api/sdkMiddlewareHttp/#named-arguments-options","title":"Named arguments (options)","text":"<ol> <li><code>host</code> (String): the host of the HTTP API service</li> <li><code>credentialsMode</code> (String): one of the supported <code>credentials</code> modes (<code>omit</code>, <code>same-origin</code>, <code>include</code>), useful when working with HTTP Cookies. (optional)</li> <li><code>includeResponseHeaders</code> (Boolean): flag whether to include the response headers in the response, if omitted headers is omitted from response</li> <li><code>includeOriginalRequest</code> (Boolean): flag whether to include the original request sent in the response. Can be useful if you want to see the final request being sent.</li> <li><code>maskSensitiveHeaderData</code> (Boolean): flag to mask sensitie data in the header. e.g. Authorization token</li> <li><code>enableRetry</code> (Boolean): flag to enable retry on network errors and <code>500</code> response. (Default: false)</li> <li><code>retryCodes</code> - (Array): array of <code>statusCodes</code> [<code>numbers</code>] and error code or messages [<code>string</code>] for retring requests when the statusCodes and/or error message/code matches an entry in the list.</li> <li><code>maxRetries</code> (Number): number of times to retry the request before failing the request. (Default: 10)</li> <li><code>retryDelay</code> (Number): amount of milliseconds to wait before retrying the next request. (Default: 200)</li> <li><code>backoff</code> (Boolean): activates exponential backoff. Recommended to prevent spamming of the server. (Default: true)</li> <li><code>maxDelay</code> (Number): The maximum duration (milliseconds) to wait before retrying, useful if the delay time grew exponentially more than reasonable</li> <li><code>retryOnAbort</code> (Boolean): Configure the client to retry an aborted request or not. Defaults to false.</li> <li><code>fetch</code> (Function): A <code>fetch</code> implementation which can be e.g. <code>node-fetch</code> or <code>unfetch</code> but also the native browser <code>fetch</code> function</li> <li><code>timeout</code> (Number): Request/response timeout in ms. Must be globally available or passed in <code>AbortController</code></li> <li><code>abortController</code> or <code>getAbortController</code> depending on what you chose to handle the timeout (abortController): This property accepts the <code>AbortController</code> instance. Could be abort-controller or a globally available one.</li> <li><code>retryConfig</code> (Object): Field required in the object listed below</li> </ol>"},{"location":"sdk/api/sdkMiddlewareHttp/#retrying-requests","title":"Retrying requests","text":"<p>This modules have a retrying ability incase of network failures or 503 response errors. To enable this behavior, pass the <code>enableRetry</code> flag in the options and also set the maximum number of retries (<code>maxRetries</code>) and amount of milliseconds to wait before retrying a request (<code>retryDelay</code>).</p> <p>The repeater implements an exponential delay, meaning the wait time is not constant and it grows on every retry.</p>"},{"location":"sdk/api/sdkMiddlewareHttp/#token-caching","title":"Token caching","text":"<p>The token is retrieved and cached upon the first request made by the client. Then, it gets refreshed when it expires. To utilize this, please make sure you use the same client instance and do not create new ones.</p>"},{"location":"sdk/api/sdkMiddlewareHttp/#usage-example","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createHttpMiddleware } from '@commercetools/sdk-middleware-http'\n\nconst client = createClient({\n  middlewares: [\n    createHttpMiddleware({\n      host: 'https://api.commercetools.com',\n      includeResponseHeaders: true,\n      includeOriginalRequest: true,\n      maskSensitiveHeaderData: true,\n      enableRetry: true,\n      retryConfig: {\n        maxRetries: 2,\n        retryDelay: 300, //milliseconds\n        maxDelay: 5000, //milliseconds\n        retryOnAbort: false,\n        retryCodes: [504, 'ETIMEDOUT', 'ECONNREFUSED', 503],\n      },\n\n      // Optional if not globally available\n      timeout: 1000,\n      fetch,\n    }),\n  ],\n})\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareHttp/#abortcontroller-getabortcontroller","title":"<code>abortController</code> | <code>getAbortController</code>","text":"<p>This is used to signal the retry module to retry the request in an event of a request timeout or service outage.</p>"},{"location":"sdk/api/sdkMiddlewareHttp/#usage-example_1","title":"Usage example","text":"<pre><code>// Use default options\nconst httpMiddleware = createHttpMiddleware({\n  host: testHost,\n  timeout: 1000, // time out after 1s\n  fetch,\n  abortController: new AbortController(),\n})\n</code></pre> <p>Note however the slight difference in usage of the <code>getAbortController</code> property of the http middleware.</p> <pre><code>// Use default options\nconst httpMiddleware = createHttpMiddleware({\n  host: testHost,\n  timeout: 1000, // time out after 1s\n  fetch,\n  getAbortController: () =&gt; new AbortController(),\n})\n</code></pre> <p>This is to ensure that a new instance of the AbortController is always created and is independent of each other. Unlike the former (abortController) which only creates a single abortController instance for the middleware, in this very case, if a single request times out, it will propagate to all other http requests that is using the <code>AbortController</code> instance. This is useful when a bunch of sent out requests needs to timeout if at least one within the bunch times out.</p>"},{"location":"sdk/api/sdkMiddlewareHttp/#geterrorbycodecode","title":"<code>getErrorByCode(code)</code>","text":"<p>Returns a custom error type given its status code.</p>"},{"location":"sdk/api/sdkMiddlewareHttp/#arguments","title":"Arguments","text":"<ol> <li><code>code</code> (Number): the HTTP status code</li> </ol>"},{"location":"sdk/api/sdkMiddlewareHttp/#returns","title":"Returns","text":"<p>(Error or undefined): A custom error type (e.g. <code>BadRequest</code>, <code>Unauthorized</code>) if the code matches, otherwise <code>undefined</code>.</p>"},{"location":"sdk/api/sdkMiddlewareHttp/#usage-example_2","title":"Usage example","text":"<pre><code>import { getErrorByCode } from '@commercetools/sdk-middleware-http'\n\nconst ErrorType = getErrorByCode(400)\nconst error = new ErrorType('Oops')\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareLogger/","title":"<code>sdk-middleware-logger</code>","text":"<p>Middleware to log incoming request and response objects.</p>"},{"location":"sdk/api/sdkMiddlewareLogger/#install","title":"Install","text":""},{"location":"sdk/api/sdkMiddlewareLogger/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/sdk-middleware-logger\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareLogger/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/sdk-middleware-logger/dist/commercetools-sdk-middleware-logger.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsSdkMiddlewareLogger\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareLogger/#createloggermiddlewareoptions","title":"<code>createLoggerMiddleware(options)</code>","text":"<p>Creates a middleware to log request and response objects being executed.</p>"},{"location":"sdk/api/sdkMiddlewareLogger/#usage-example","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createLoggerMiddleware } from '@commercetools/sdk-middleware-logger'\nimport { createAuthMiddleware } from '@commercetools/sdk-middleware-auth'\nimport { createHttpMiddleware } from '@commercetools/sdk-middleware-http'\n\nconst client = createClient({\n  middlewares: [\n    createAuthMiddleware({...}),\n    // Log the request / response at this point in the middleware chain, before it gets to the http-middleware\n    createLoggerMiddleware(),\n    createHttpMiddleware({...}),\n    // Log the request / response after it's being handled by the http-middleware\n    createLoggerMiddleware(),\n  ],\n})\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareQueue/","title":"<code>sdk-middleware-queue</code>","text":"<p>Middleware to throttle concurrent request to a certain limit. Useful to reduce concurrent HTTP requests.</p>"},{"location":"sdk/api/sdkMiddlewareQueue/#install","title":"Install","text":""},{"location":"sdk/api/sdkMiddlewareQueue/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/sdk-middleware-queue\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareQueue/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/sdk-middleware-queue/dist/commercetools-sdk-middleware-queue.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsSdkMiddlewareQueue\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareQueue/#createqueuemiddlewareoptions","title":"<code>createQueueMiddleware(options)</code>","text":"<p>Creates a middleware to handle concurrent requests.</p>"},{"location":"sdk/api/sdkMiddlewareQueue/#named-arguments-options","title":"Named arguments (options)","text":"<ol> <li><code>concurrency</code> (Number): the max number of concurrent requests (default <code>20</code>)</li> </ol>"},{"location":"sdk/api/sdkMiddlewareQueue/#usage-example","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createQueueMiddleware } from '@commercetools/sdk-middleware-queue'\n\nconst client = createClient({\n  middlewares: [\n    createQueueMiddleware({\n      concurrency: 5,\n    }),\n  ],\n})\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareUserAgent/","title":"<code>sdk-middleware-user-agent</code>","text":"<p>Middleware to automatically set the <code>User-Agent</code> to the request.</p>"},{"location":"sdk/api/sdkMiddlewareUserAgent/#install","title":"Install","text":""},{"location":"sdk/api/sdkMiddlewareUserAgent/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/sdk-middleware-user-agent\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareUserAgent/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/sdk-middleware-user-agent/dist/commercetools-sdk-middleware-user-agent.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsSdkMiddlewareUserAgent\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/sdkMiddlewareUserAgent/#createuseragentmiddlewareoptions","title":"<code>createUserAgentMiddleware(options)</code>","text":"<p>Creates a middleware to append the <code>User-Agent</code> HTTP header to the request.</p>"},{"location":"sdk/api/sdkMiddlewareUserAgent/#named-arguments-options","title":"Named arguments (options)","text":"<ol> <li><code>libraryName</code> (String): the name of the library / package / application using the SDK (optional)</li> <li><code>libraryVersion</code> (String): the version of the library / package / application using the SDK (optional)</li> <li><code>contactUrl</code> (String): the contact URL of the library / package / application using the SDK (optional)</li> <li><code>contactEmail</code> (String): the contact email of the library / package / application using the SDK (optional)</li> </ol>"},{"location":"sdk/api/sdkMiddlewareUserAgent/#usage-example","title":"Usage example","text":"<pre><code>import { createClient } from '@commercetools/sdk-client'\nimport { createUserAgentMiddleware } from '@commercetools/sdk-middleware-user-agent'\nimport { createAuthMiddleware } from '@commercetools/sdk-middleware-auth'\nimport { createHttpMiddleware } from '@commercetools/sdk-middleware-http'\n\nconst userAgentMiddleware = createUserAgentMiddleware(),\nconst client = createClient({\n  middlewares: [\n    createAuthMiddleware({...}),\n    createUserAgentMiddleware({\n      libraryName: 'my-awesome-library',\n      libraryVersion: '1.0.0',\n      contactUrl: 'https://github.com/commercetools/my-awesome-library'\n      contactEmail: 'helpdesk@commercetools.com'\n    }),\n    createHttpMiddleware({...}),\n  ],\n})\n\n// The User-Agent will be something like:\n// commercetools-js-sdk Node.js/6.9.0 (darwin; x64) my-awesome-library/1.0.0 (+https://github.com/commercetools/my-awesome-library; +helpdesk@commercetools.com)\n</code></pre>"},{"location":"sdk/api/syncActions/","title":"<code>sync-actions</code>","text":"<p>Provides an API to construct update actions. Useful for building request <code>body</code> for updates.</p>"},{"location":"sdk/api/syncActions/#install","title":"Install","text":""},{"location":"sdk/api/syncActions/#nodejs","title":"Node.js","text":"<pre><code>npm install --save @commercetools/sync-actions\n</code></pre>"},{"location":"sdk/api/syncActions/#browser","title":"Browser","text":"<pre><code>&lt;script src=\"https://unpkg.com/@commercetools/sync-actions/dist/commercetools-sync-actions.umd.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  // global: CommercetoolsSyncActions\n&lt;/script&gt;\n</code></pre>"},{"location":"sdk/api/syncActions/#createsynccategoriesactiongroups","title":"<code>createSyncCategories(actionGroups)</code>","text":"<p>Creates a sync action that allows to build API update actions for categories.</p>"},{"location":"sdk/api/syncActions/#arguments","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example","title":"Usage example","text":"<pre><code>import { createSyncCategories } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncCategories = createSyncCategories()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  name: { en: 'My Category' }\n}\nconst now = {\n  name: { en: 'My Category', de: 'Meine Kategorie' }\n}\nconst actions = syncCategories.buildActions(now, before)\nconst categoriesRequest = {\n  uri: `/categories/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(categoriesRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsynccustomersactiongroups","title":"<code>createSyncCustomers(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for customers.</p>"},{"location":"sdk/api/syncActions/#arguments_1","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_1","title":"Usage example","text":"<pre><code>import { createSyncCustomers } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncCustomers = createSyncCustomers()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  firstName: 'John'\n}\nconst now = {\n  firstName: 'John',\n  lastName: 'Doe'\n}\nconst actions = syncCustomers.buildActions(now, before)\nconst customersRequest = {\n  uri: `/customers/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(customersRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncinventoriesactiongroups","title":"<code>createSyncInventories(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for inventories.</p>"},{"location":"sdk/api/syncActions/#arguments_2","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_2","title":"Usage example","text":"<pre><code>import { createSyncInventories } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncInventories = createSyncInventories()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  quantityOnStock: 10\n}\nconst now = {\n  quantityOnStock: 5\n}\nconst actions = syncInventories.buildActions(now, before)\nconst inventoriesRequest = {\n  uri: `/inventory/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(inventoriesRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncordersactiongroups","title":"<code>createSyncOrders(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for orders.</p>"},{"location":"sdk/api/syncActions/#arguments_3","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_3","title":"Usage example","text":"<pre><code>import { createSyncOrders } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncOrders = createSyncOrders()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  orderState: 'Open'\n}\nconst now = {\n  orderState: 'Complete'\n}\nconst actions = syncOrders.buildActions(now, before)\nconst ordersRequest = {\n  uri: `/orders/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(ordersRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncproductsactiongroups","title":"<code>createSyncProducts(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for products.</p>"},{"location":"sdk/api/syncActions/#arguments_4","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_4","title":"Usage example","text":"<pre><code>import { createSyncProducts } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncProducts = createSyncProducts()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  name: { en: 'My Product' }\n}\nconst now = {\n  name: { en: 'My Product', de: 'Mein Produkt' }\n}\nconst actions = syncProducts.buildActions(now, before)\nconst productsRequest = {\n  uri: `/products/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(productsRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncproductdiscountsactiongroups","title":"<code>createSyncProductDiscounts(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for product-discounts.</p>"},{"location":"sdk/api/syncActions/#arguments_5","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_5","title":"Usage example","text":"<pre><code>import { createSyncProductDiscounts } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncProductDiscounts = createSyncProductDiscounts()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  name: { en: 'My Product Discount' }\n}\nconst now = {\n  name: { en: 'My Product Discount', de: 'Mein Produkt Rabatt' }\n}\nconst actions = syncProductDiscounts.buildActions(now, before)\nconst productDiscountsRequests = {\n  uri: `/product-discounts/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(productDiscountsRequests)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncdiscountcodesactiongroups","title":"<code>createSyncDiscountCodes(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for discount-codes.</p>"},{"location":"sdk/api/syncActions/#arguments_6","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_6","title":"Usage example","text":"<pre><code>import { createSyncDiscountCodes } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncDiscountCodes = createSyncDiscountCodes()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  name: { en: 'My Discount Code' }\n}\nconst now = {\n  name: { en: 'My Discount Code', de: 'Mein Rabatt Code' }\n}\nconst actions = syncDiscountCodes.buildActions(now, before)\nconst discountCodesRequest = {\n  uri: `/discount-codes/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(discountCodesRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsynccustomergroupactiongroups","title":"<code>createSyncCustomerGroup(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for customer-groups.</p>"},{"location":"sdk/api/syncActions/#arguments_7","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_7","title":"Usage example","text":"<pre><code>import { createSyncCustomerGroup } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncCustomerGroups = createSyncCustomerGroup()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  name: 'My customer group',\n  key: 'some-old-key'\n}\nconst now = {\n  name: 'My new customer group',\n  key: 'some-new-key'\n}\nconst actions = syncCustomerGroups.buildActions(now, before)\nconst customerGroupRequest = {\n  uri: `/customer-groups/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(customerGroupRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsynccartdiscountsactiongroups","title":"<code>createSyncCartDiscounts(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for cart-discounts.</p>"},{"location":"sdk/api/syncActions/#arguments_8","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_8","title":"Usage example","text":"<pre><code>import { createSyncCartDiscounts } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncCartDiscounts = createSyncCartDiscounts()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  name: { en: 'My Cart Discount' }\n}\nconst now = {\n  name: { en: 'My Cart Discount', de: 'Mein Warenkorbrabatt' }\n}\nconst actions = syncCartDiscounts.buildActions(now, before)\nconst cartDiscountsRequests = {\n  uri: `/cart-discounts/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(cartDiscountsRequests)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsynctaxcategoriesactiongroups","title":"<code>createSyncTaxCategories(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for tax-categories.</p>"},{"location":"sdk/api/syncActions/#arguments_9","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_9","title":"Usage example","text":"<pre><code>import { createSyncTaxCategories } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncTaxCategories = createSyncTaxCategories()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  name: 'My Tax Category'\n}\nconst now = {\n  name: 'My Updated Tax Category'\n}\nconst actions = syncTaxCategories.buildActions(now, before)\nconst taxCategoriesRequests = {\n  uri: `/tax-categories/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(taxCategoriesRequests)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsynczonesactiongroups","title":"<code>createSyncZones(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for zones.</p>"},{"location":"sdk/api/syncActions/#arguments_10","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_10","title":"Usage example","text":"<pre><code>import { createSyncZones } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncZones = createSyncZones()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  name: 'My Zone'\n}\nconst now = {\n  name: 'My Other Zone'\n}\nconst actions = syncZones.buildActions(now, before)\nconst zonesRequests = {\n  uri: `/zones/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(zonesRequests)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncproducttypesactiongroups-config","title":"<code>createSyncProductTypes(actionGroups, config)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for productTypes.</p>"},{"location":"sdk/api/syncActions/#arguments_11","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> <li><code>config</code> (Object): A configuration object to which has one of the following options:</li> </ol> Key Type Required Description <code>shouldOmitEmptyString</code> <code>Boolean</code> - (default: <code>false</code>) a flag which determines whether we should treat empty strings as NOT A VALUE in addition to <code>undefined</code> and <code>null</code>"},{"location":"sdk/api/syncActions/#usage-example_11","title":"Usage example","text":"<pre><code>import { createSyncProductTypes } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncProductTypes = createSyncProductTypes()\nconst client = createClient({\n  middlewares: [...],\n})\n\nconst before = {\n  id: 'product-type-id',\n  name: 'Product Type',\n  version: 1,\n}\n\nconst now = {\n  id: 'product-type-id',\n  name: 'Other Product Type',\n  version: 1,\n}\n\nconst actions = syncProductTypes.buildActions(now, before)\nconst productTypesRequest = {\n  uri: `/product-types/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(productTypesRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#difference-to-sync-actions-for-other-resources","title":"Difference to sync-actions for other resources","text":"<p>Unlike other resources (e.g <code>createSyncProducts</code>), <code>createSyncProductTypes</code> requires that you apply hints to calculate update actions for nested values such as <code>attributes</code> and <code>enumValues</code>.</p> <p>Since a change in the API, the previous implementation was not capable for calculating appropriate update-actions when an enum-value has changed its <code>key</code>, or when an attribute has changed its <code>name</code>.</p> <p>The <code>key</code> of an enum value was used as its identifier to calculate correct update-actions. When the intention of a change was <code>changeEnumKey</code>, it is discernable for <code>sync-actions</code> to appropriately calculate that for you. Same goes for attribute values.</p> <p>Note: <code>createSyncProductTypes</code> does not support <code>changeAttributeName</code> nor <code>changeEnumKey</code> for the moment, but this is something we will add in, in the near future.</p> <p>here is how you apply hints</p> <pre><code>const productTypeSync = createProductTypeSync()\nconst previous = {\n  name: 'previous',\n}\nconst next = {\n  name: 'next',\n}\n\nconst updateActions = productTypeSync.buildActions(next, previous, {\n  // hints\n  nestedValuesChanges: {\n    attributeDefinitions: [\n      {\n        // when previous and next are defined\n        // this will generate update actions for __changes__ to an attribute\n        previous: { name: 'previous-attribute-name' },\n        next: { name: 'next-attribute-name' },\n      },\n      {\n        // when next is defined, but not previous\n        // this will generate update actions for __adding__ an attribute\n        previous: undefined,\n        next: { name: 'next-attribute-name' },\n      },\n      {\n        // when previous is defined, but not next,\n        // this will generate update actions for __removing__ an attribute\n        previous: { name: 'next-attribute-name' },\n        next: undefined,\n      },\n      // ...\n      // any other changes to another attribute...\n    ],\n    attributeEnumValues: [\n      {\n        previous: { key: 'previous-enum-key' },\n        next: { key: 'next-enum-key' },\n        hint: {\n          // note the change on attribute above.\n          attributeName: 'next-attribute-name',\n          // isLocalized is a valuable hint to `sync-actions`, since in the API,\n          // we have different update actions on an enum value depending on whether the label is localized or not.\n          // read more about `changePlainEnumValueLabel` and `changeLocalizedEnumValueLabel`\n          // https://docs.commercetools.com/api/projects/productTypes#change-the-label-of-an-enumvalue\n          isLocalized: false,\n        },\n      },\n      {\n        previous: { key: 'previous-enum-key-2' },\n        next: undefined,\n        hint: {\n          // note the change on attribute above.\n          attributeName: 'next-attribute-name',\n          isLocalized: false,\n        },\n      },\n      // ...\n      // any other changes on enum values of another attribute...\n    ],\n  },\n})\nconsole.log(updateActions)\n// [\n//   // product type changes..\n//   {\n//     action: 'changeName',\n//     name: 'next-attribute-name'\n//   },\n//\n//   // these are calculated separately, only through `nestedValuesChanges` hints\n//   // because hint are __explicit__, we don't worry about identifiers such as `key` (enum) or `name` (attribute).\n//   // attribute\n//   {\n//     action: 'changeAttributeName',\n//     attributeName: 'next-attribute-name'\n//   },\n//\n//   //  enums\n//   {\n//     action: 'changeEnumKey',\n//     key: 'next-enum-key'\n//   },\n//   {\n//     action: 'removeEnumValues'\n//     attributeName: 'next-attribute-name'\n//     keys: ['previous-enum-key-2'],\n//   }\n// ]\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncstoresactiongroups","title":"<code>createSyncStores(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for stores.</p>"},{"location":"sdk/api/syncActions/#arguments_12","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_12","title":"Usage example","text":"<pre><code>import { createSyncStores } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncStores = createSyncStores()\nconst client = createClient({\n  middlewares: [...],\n})\nconst before = {\n  id: 'store-1',\n  name: { 'en': 'Germany' },\n}\nconst now = {\n  name: { 'de': 'Deutschland', 'en': 'Germany' },\n}\nconst actions = syncStores.buildActions(now, before)\nconst storesRequest = {\n  uri: `/stores/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(storesRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncshippingmethodsactiongroups","title":"<code>createSyncShippingMethods(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for zones.</p>"},{"location":"sdk/api/syncActions/#arguments_13","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_13","title":"Usage example","text":"<pre><code>import { createSyncShippingMethods } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncShippingMethods = createSyncShippingMethods()\nconst client = createClient({\n  middlewares: [...],\n})\n\nconst before = {\n  key: 'Key 1'\n}\n\nconst now = {\n  name: 'Key 2'\n}\n\nconst actions = syncShippingMethods.buildActions(now, before)\nconst shippingMethodsRequests = {\n  uri: `/shipping-methods/${before.id}`,\n\n\nclient.execute(shippingMethodsRequests)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncstatesactiongroups","title":"<code>createSyncStates(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for states.</p>"},{"location":"sdk/api/syncActions/#arguments_14","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_14","title":"Usage example","text":"<pre><code>import { createSyncShippingStates } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncStates = createStates()\nconst client = createClient({\n  middlewares: [...],\n})\n\nconst before = {\n  key: 'Key 1'\n}\n\nconst now = {\n  name: 'Key 2'\n}\n\nconst actions = syncStates.buildActions(now, before)\nconst statesRequests = {\n  uri: `/states/${before.id}`,\n}\n\nclient.execute(statesRequests)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsynctypesactiongroups-config","title":"<code>createSyncTypes(actionGroups, config)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for types.</p> <p>Please note that there is no <code>remove action</code> for <code>enum</code> values. So this package will comply with the platform and only generate <code>changeOrder</code> and <code>add</code> actions for any <code>enum</code>.</p>"},{"location":"sdk/api/syncActions/#arguments_15","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> <li><code>config</code> (Object): A configuration object to which has one of the following options:</li> </ol> Key Type Required Description <code>shouldOmitEmptyString</code> <code>Boolean</code> - (default: <code>false</code>) a flag which determines whether we should treat empty strings as NOT A VALUE in addition to <code>undefined</code> and <code>null</code>"},{"location":"sdk/api/syncActions/#usage-example_15","title":"Usage example","text":"<pre><code>import { createSyncTypes } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncTypes = createSyncTypes()\nconst client = createClient({\n  middlewares: [...],\n})\n\nconst before = {\n  id: 'type-id',\n  name: 'Type',\n  version: 1,\n}\n\nconst now = {\n  id: 'type-id',\n  name: 'Other Type',\n  version: 1,\n}\n\nconst actions = syncTypes.buildActions(now, before)\nconst typesRequest = {\n  uri: `/types/${before.id}`,\n  method: 'POST',\n  body: JSON.stringify({ version: before.version, actions }),\n}\n\nclient.execute(typesRequest)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncchannelsactiongroups","title":"<code>createSyncChannels(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for channels.</p>"},{"location":"sdk/api/syncActions/#arguments_16","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_16","title":"Usage example","text":"<pre><code>import { createSyncChannels } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncChannels = createSyncChannels()\nconst client = createClient({\n  middlewares: [...],\n})\n\nconst before = {\n  key: 'Key 1',\n  roles: ['Role 1'],\n}\n\nconst now = {\n  name: 'Key 2',\n  roles: ['Role 1', 'Role 2'],\n}\n\nconst actions = syncChannels.buildActions(now, before)\nconst channelsRequests = {\n  uri: `/channels/${before.id}`,\n}\n\n\nclient.execute(channelsRequests)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre> <p>Note that the channels syncer currently generates only <code>setRoles</code> actions and not individual <code>addRoles</code> and <code>removeRoles</code> respectively.</p>"},{"location":"sdk/api/syncActions/#with-shouldomitemptystringtrue","title":"With <code>shouldOmitEmptyString=true</code>","text":"<p>Given that <code>shouldOmitEmptyString</code> is provided, we won't generate any <code>updateAction</code> in the following cases:</p> Before Now Will generate update action? Value for the action <code>\"\"</code> <code>null</code> no <code>\"\"</code> <code>undefined</code> no <code>\"\"</code> <code>\"foo\"</code> yes <code>\"foo\"</code> <code>null</code> <code>\"\"</code> no <code>null</code> <code>undefined</code> no <code>null</code> <code>\"foo\"</code> yes <code>\"foo\"</code> <code>undefined</code> <code>\"\"</code> no <code>undefined</code> <code>null</code> no <code>undefined</code> <code>\"foo\"</code> yes <code>\"foo\"</code> <code>\"foo\"</code> <code>\"\"</code> yes omitted from the action <code>\"foo\"</code> <code>null</code> yes omitted from the action <code>\"foo\"</code> <code>undefined</code> yes omitted from the action <p>The final value of the action as displayed above will be given, regardless if the value of the action is required or not.</p> <p>See example below.</p> <pre><code>const productTypeSync = createSyncProductTypes([], {\n  shouldOmitEmptyString: true,\n})\nconst before = { key: '' }\nconst now = { key: null }\nconst actions = sync.buildActions(now, before)\n\n// outputs:\n// []\n</code></pre>"},{"location":"sdk/api/syncActions/#createsyncprojectsactiongroups","title":"<code>createSyncProjects(actionGroups)</code>","text":"<p>From package @commercetools/sync-actions.</p> <p>Creates a sync action that allows to build API update actions for projects.</p>"},{"location":"sdk/api/syncActions/#arguments_17","title":"Arguments","text":"<ol> <li><code>actionGroups</code> (Array): A list of action group in case some actions need to be ignored or allowed.</li> </ol>"},{"location":"sdk/api/syncActions/#usage-example_17","title":"Usage example","text":"<pre><code>import { createSyncProjects } from '@commercetools/sync-actions'\nimport { createClient } from '@commercetools/sdk-client'\n\nconst syncProjects = createSyncProjects()\nconst client = createClient({\n  middlewares: [...],\n})\n\nconst before = {\n  id: 'some-project-uuid',\n  name: 'Name 1',\n  currencies: ['EUR', 'Dollar']\n}\n\nconst now = {\n  name: 'Name 1',\n  currencies: ['EUR']\n}\n\nconst actions = syncProjects.buildActions(now, before)\nconst projectsRequests = {\n  uri: `/projects/${before.id}`,\n}\n\n\nclient.execute(projectsRequests)\n.then(result =&gt; ...)\n.catch(error =&gt; ...)\n</code></pre>"},{"location":"sdk/api/typescriptSdk/","title":"TypeScript SDK Client v2","text":"<p>Follow this link for an up to date and more accurate JavaScript/TypeScript SDK documentation.</p>"}]}